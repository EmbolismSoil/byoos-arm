cscope 15 $HOME/projects/byoos               0000079161
	@byoos.c

10 
	~<бdЪt.h
>

11 
	~"byoos_c┌fig.h
"

12 
	~"debug.h
"

17 
	gC▄e
 = 
CFG_MYOS_CORE
;

23 
low_╦vЦ_ЪЩ
((*
╗гt_addr
)(), (*
╗tu║_addr
)())

26 
	}
}

29 
	$byoos_ЪЩ
()

32 
	}
}

35 
	$byoos_maЪ
()

37 
uЪt8_t
 
cou┴
;

39 
	`byoos_ЪЩ
();

40 
	`debugp
(
INFO_MSG
, "MYOS init complete,Гntering mainЖoop \n");

43 
cou┴
++;

44 if(!
cou┴
) {

45 
	`debugp
(
INFO_MSG
, "DI Kernel isЗlive");

50 
	}
}

	@byoos.h

11 #iтdeр
BYOOS_H


12 
	#BYOOS_H


	)

13 
	~"ty│s.h
"

15 
	#ARRAY_SIZE
(
x
ш((xш/ ((x)[0]))

	)

16 
	#NULL
 '\0'

	)

18 
C▄e
;

	@byoos_config.h

9 #iтdeр
BYOOS_CONFIG_H


10 
	#BYOOS_CONFIG_H


	)

15 
	~"imx6x.h
"

25 
	#CFG_MYOS_CORE
 3

	)

34 
	#CFG_MYOS_UART
 3

	)

40 
	#CONFIG_SYS_BAUDRATE_TABLE
 { 9600, 19200, 38400, 57600, 115200 }

	)

41 
	#CONFIG_BAUDRATE
 115200

	)

42 
	#CONFIG_MXC_UART_BASE
 
UART4_BASE


	)

48 
	#CFG_DEBUG_CHAR_MAX
 64

	)

	@crm_regs.h

7 #iтdeр
__ARCH_ARM_MACH_MX6_CCM_REGS_H__


8 
	#__ARCH_ARM_MACH_MX6_CCM_REGS_H__


	)

10 
	#CCM_CCOSR
 0x020c4060

	)

11 
	#CCM_CCGR0
 0x020C4068

	)

12 
	#CCM_CCGR1
 0x020C406c

	)

13 
	#CCM_CCGR2
 0x020C4070

	)

14 
	#CCM_CCGR3
 0x020C4074

	)

15 
	#CCM_CCGR4
 0x020C4078

	)

16 
	#CCM_CCGR5
 0x020C407c

	)

17 
	#CCM_CCGR6
 0x020C4080

	)

19 
	#PMU_MISC2
 0x020C8170

	)

21 #iтdeр
__ASSEMBLY__


22 
	smxc_ccm_╗g
 {

23 
u32
 
	mc№
;

24 
u32
 
	mccdr
;

25 
u32
 
	mcд
;

26 
u32
 
	mccд
;

27 
u32
 
	m №r
;

28 
u32
 
	mcbcdr
;

29 
u32
 
	mcbcmr
;

30 
u32
 
	mcscmr1
;

31 
u32
 
	mcscmr2
;

32 
u32
 
	mcscdr1
;

33 
u32
 
	mcs1cdr
;

34 
u32
 
	mcs2cdr
;

35 
u32
 
	mcdcdr
;

36 
u32
 
	mchsccdr
;

37 
u32
 
	mcscdr2
;

38 
u32
 
	mcscdr3
;

39 
u32
 
	mcscdr4
;

40 
u32
 
	m╗sv0
;

41 
u32
 
	mcdhЭr
;

42 
u32
 
	mcd№
;

43 
u32
 
	m∙▄
;

44 
u32
 
	m■p№
;

45 
u32
 
	mciд
;

46 
u32
 
	mcimr
;

47 
u32
 
	mccoд
;

48 
u32
 
	mcg┤
;

49 
u32
 
	mCCGR0
;

50 
u32
 
	mCCGR1
;

51 
u32
 
	mCCGR2
;

52 
u32
 
	mCCGR3
;

53 
u32
 
	mCCGR4
;

54 
u32
 
	mCCGR5
;

55 
u32
 
	mCCGR6
;

56 
u32
 
	mCCGR7
;

57 
u32
 
	mcme▄
;

58 
u32
 
	m╗sv
[0xfdd];

59 
u32
 
	mкоog_╢l_sys
;

60 
u32
 
	mкоog_╢l_sys_гt
;

61 
u32
 
	mкоog_╢l_sys_■r
;

62 
u32
 
	mкоog_╢l_sys_tog
;

63 
u32
 
	mкоog_usb1_╢l_480_∙╛
;

64 
u32
 
	mкоog_usb1_╢l_480_∙╛_гt
;

65 
u32
 
	mкоog_usb1_╢l_480_∙╛_■r
;

66 
u32
 
	mкоog_usb1_╢l_480_∙╛_tog
;

67 
u32
 
	mкоog_╗гrved0
[4];

68 
u32
 
	mкоog_╢l_528
;

69 
u32
 
	mкоog_╢l_528_гt
;

70 
u32
 
	mкоog_╢l_528_■r
;

71 
u32
 
	mкоog_╢l_528_tog
;

72 
u32
 
	mкоog_╢l_528_ss
;

73 
u32
 
	mкоog_╗гrved1
[3];

74 
u32
 
	mкоog_╢l_528_num
;

75 
u32
 
	mкоog_╗гrved2
[3];

76 
u32
 
	mкоog_╢l_528_dТom
;

77 
u32
 
	mкоog_╗гrved3
[3];

78 
u32
 
	mкоog_╢l_audio
;

79 
u32
 
	mкоog_╢l_audio_гt
;

80 
u32
 
	mкоog_╢l_audio_■r
;

81 
u32
 
	mкоog_╢l_audio_tog
;

82 
u32
 
	mкоog_╢l_audio_num
;

83 
u32
 
	mкоog_╗гrved4
[3];

84 
u32
 
	mкоog_╢l_audio_dТom
;

85 
u32
 
	mкоog_╗гrved5
[3];

86 
u32
 
	mкоog_╢l_video
;

87 
u32
 
	mкоog_╢l_video_гt
;

88 
u32
 
	mкоog_╢l_video_■r
;

89 
u32
 
	mкоog_╢l_video_tog
;

90 
u32
 
	mкоog_╢l_video_num
;

91 
u32
 
	mкоog_╗гrved6
[3];

92 
u32
 
	mкоog_╢l_vedio_dТ┌
;

93 
u32
 
	mкоog_╗гrved7
[7];

94 
u32
 
	mкоog_╢l_ТС
;

95 
u32
 
	mкоog_╢l_ТС_гt
;

96 
u32
 
	mкоog_╢l_ТС_■r
;

97 
u32
 
	mкоog_╢l_ТС_tog
;

98 
u32
 
	mкоog_pfd_480
;

99 
u32
 
	mкоog_pfd_480_гt
;

100 
u32
 
	mкоog_pfd_480_■r
;

101 
u32
 
	mкоog_pfd_480_tog
;

102 
u32
 
	mкоog_pfd_528
;

103 
u32
 
	mкоog_pfd_528_гt
;

104 
u32
 
	mкоog_pfd_528_■r
;

105 
u32
 
	mкоog_pfd_528_tog
;

110 
	#MXC_CCM_CCR_RBC_EN
 (1 << 27)

	)

111 
	#MXC_CCM_CCR_REG_BYPASS_CNT_MASK
 (0x3F << 21)

	)

112 
	#MXC_CCM_CCR_REG_BYPASS_CNT_OFFSET
 21

	)

113 
	#MXC_CCM_CCR_WB_COUNT_MASK
 0x7

	)

114 
	#MXC_CCM_CCR_WB_COUNT_OFFSET
 (1 << 16)

	)

115 
	#MXC_CCM_CCR_COSC_EN
 (1 << 12)

	)

116 
	#MXC_CCM_CCR_OSCNT_MASK
 0xFF

	)

117 
	#MXC_CCM_CCR_OSCNT_OFFSET
 0

	)

120 
	#MXC_CCM_CCDR_MMDC_CH1_HS_MASK
 (1 << 16)

	)

121 
	#MXC_CCM_CCDR_MMDC_CH0_HS_MASK
 (1 << 17)

	)

124 
	#MXC_CCM_CSR_COSC_READY
 (1 << 5)

	)

125 
	#MXC_CCM_CSR_REF_EN_B
 (1 << 0)

	)

128 
	#MXC_CCM_CCSR_PDF_540M_AUTO_DIS
 (1 << 15)

	)

129 
	#MXC_CCM_CCSR_PDF_720M_AUTO_DIS
 (1 << 14)

	)

130 
	#MXC_CCM_CCSR_PDF_454M_AUTO_DIS
 (1 << 13)

	)

131 
	#MXC_CCM_CCSR_PDF_508M_AUTO_DIS
 (1 << 12)

	)

132 
	#MXC_CCM_CCSR_PDF_594M_AUTO_DIS
 (1 << 11)

	)

133 
	#MXC_CCM_CCSR_PDF_352M_AUTO_DIS
 (1 << 10)

	)

134 
	#MXC_CCM_CCSR_PDF_400M_AUTO_DIS
 (1 << 9)

	)

135 
	#MXC_CCM_CCSR_STEP_SEL
 (1 << 8)

	)

136 
	#MXC_CCM_CCSR_PLL1_SW_CLK_SEL
 (1 << 2)

	)

137 
	#MXC_CCM_CCSR_PLL2_SW_CLK_SEL
 (1 << 1)

	)

138 
	#MXC_CCM_CCSR_PLL3_SW_CLK_SEL
 (1 << 0)

	)

141 
	#MXC_CCM_CACRR_ARM_PODF_OFFSET
 0

	)

142 
	#MXC_CCM_CACRR_ARM_PODF_MASK
 0x7

	)

145 
	#MXC_CCM_CBCDR_PERIPH_CLK2_PODF_MASK
 (0x7 << 27)

	)

146 
	#MXC_CCM_CBCDR_PERIPH_CLK2_PODF_OFFSET
 27

	)

147 
	#MXC_CCM_CBCDR_PERIPH2_CLK2_SEL
 (1 << 26)

	)

148 
	#MXC_CCM_CBCDR_PERIPH_CLK_SEL
 (1 << 25)

	)

149 
	#MXC_CCM_CBCDR_MMDC_CH0_PODF_MASK
 (0x7 << 19)

	)

150 
	#MXC_CCM_CBCDR_MMDC_CH0_PODF_OFFSET
 19

	)

151 
	#MXC_CCM_CBCDR_AXI_PODF_MASK
 (0x7 << 16)

	)

152 
	#MXC_CCM_CBCDR_AXI_PODF_OFFSET
 16

	)

153 
	#MXC_CCM_CBCDR_AHB_PODF_MASK
 (0x7 << 10)

	)

154 
	#MXC_CCM_CBCDR_AHB_PODF_OFFSET
 10

	)

155 
	#MXC_CCM_CBCDR_IPG_PODF_MASK
 (0x3 << 8)

	)

156 
	#MXC_CCM_CBCDR_IPG_PODF_OFFSET
 8

	)

157 
	#MXC_CCM_CBCDR_AXI_ALT_SEL
 (1 << 7)

	)

158 
	#MXC_CCM_CBCDR_AXI_SEL
 (1 << 6)

	)

159 
	#MXC_CCM_CBCDR_MMDC_CH1_PODF_MASK
 (0x7 << 3)

	)

160 
	#MXC_CCM_CBCDR_MMDC_CH1_PODF_OFFSET
 3

	)

161 
	#MXC_CCM_CBCDR_PERIPH2_CLK2_PODF_MASK
 (0x7 << 0)

	)

162 
	#MXC_CCM_CBCDR_PERIPH2_CLK2_PODF_OFFSET
 0

	)

165 
	#MXC_CCM_CBCMR_GPU3D_SHADER_PODF_MASK
 (0x7 << 29)

	)

166 
	#MXC_CCM_CBCMR_GPU3D_SHADER_PODF_OFFSET
 29

	)

167 
	#MXC_CCM_CBCMR_GPU3D_CORE_PODF_MASK
 (0x7 << 26)

	)

168 
	#MXC_CCM_CBCMR_GPU3D_CORE_PODF_OFFSET
 26

	)

169 
	#MXC_CCM_CBCMR_GPU2D_CORE_PODF_MASK
 (0x7 << 23)

	)

170 
	#MXC_CCM_CBCMR_GPU2D_CORE_PODF_OFFSET
 23

	)

171 
	#MXC_CCM_CBCMR_PRE_PERIPH2_CLK_SEL_MASK
 (0x3 << 21)

	)

172 
	#MXC_CCM_CBCMR_PRE_PERIPH2_CLK_SEL_OFFSET
 21

	)

173 
	#MXC_CCM_CBCMR_PRE_PERIPH2_CLK2_SEL
 (1 << 20)

	)

174 
	#MXC_CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK
 (0x3 << 18)

	)

175 
	#MXC_CCM_CBCMR_PRE_PERIPH_CLK_SEL_OFFSET
 18

	)

176 
	#MXC_CCM_CBCMR_GPU2D_CLK_SEL_MASK
 (0x3 << 16)

	)

177 
	#MXC_CCM_CBCMR_GPU2D_CLK_SEL_OFFSET
 16

	)

178 
	#MXC_CCM_CBCMR_VPU_AXI_CLK_SEL_MASK
 (0x3 << 14)

	)

179 
	#MXC_CCM_CBCMR_VPU_AXI_CLK_SEL_OFFSET
 14

	)

180 
	#MXC_CCM_CBCMR_PERIPH_CLK2_SEL_MASK
 (0x3 << 12)

	)

181 
	#MXC_CCM_CBCMR_PERIPH_CLK2_SEL_OFFSET
 12

	)

182 
	#MXC_CCM_CBCMR_VDOAXI_CLK_SEL
 (1 << 11)

	)

183 
	#MXC_CCM_CBCMR_PCIE_AXI_CLK_SEL
 (1 << 10)

	)

184 
	#MXC_CCM_CBCMR_GPU3D_SHADER_CLK_SEL_MASK
 (0x3 << 8)

	)

185 
	#MXC_CCM_CBCMR_GPU3D_SHADER_CLK_SEL_OFFSET
 8

	)

186 
	#MXC_CCM_CBCMR_GPU3D_CORE_CLK_SEL_MASK
 (0x3 << 4)

	)

187 
	#MXC_CCM_CBCMR_GPU3D_CORE_CLK_SEL_OFFSET
 4

	)

188 
	#MXC_CCM_CBCMR_GPU3D_AXI_CLK_SEL
 (1 << 1)

	)

189 
	#MXC_CCM_CBCMR_GPU2D_AXI_CLK_SEL
 (1 << 0)

	)

192 
	#MXC_CCM_CSCMR1_ACLK_EMI_SLOW_MASK
 (0x3 << 29)

	)

193 
	#MXC_CCM_CSCMR1_ACLK_EMI_SLOW_OFFSET
 29

	)

194 
	#MXC_CCM_CSCMR1_ACLK_EMI_MASK
 (0x3 << 27)

	)

195 
	#MXC_CCM_CSCMR1_ACLK_EMI_OFFSET
 27

	)

196 
	#MXC_CCM_CSCMR1_ACLK_EMI_SLOW_PODF_MASK
 (0x7 << 23)

	)

197 
	#MXC_CCM_CSCMR1_ACLK_EMI_SLOW_PODF_OFFSET
 23

	)

198 
	#MXC_CCM_CSCMR1_ACLK_EMI_PODF_MASK
 (0x7 << 20)

	)

199 
	#MXC_CCM_CSCMR1_ACLK_EMI_PODF_OFFSET
 20

	)

200 
	#MXC_CCM_CSCMR1_USDHC4_CLK_SEL
 (1 << 19)

	)

201 
	#MXC_CCM_CSCMR1_USDHC3_CLK_SEL
 (1 << 18)

	)

202 
	#MXC_CCM_CSCMR1_USDHC2_CLK_SEL
 (1 << 17)

	)

203 
	#MXC_CCM_CSCMR1_USDHC1_CLK_SEL
 (1 << 16)

	)

204 
	#MXC_CCM_CSCMR1_SSI3_CLK_SEL_MASK
 (0x3 << 14)

	)

205 
	#MXC_CCM_CSCMR1_SSI3_CLK_SEL_OFFSET
 14

	)

206 
	#MXC_CCM_CSCMR1_SSI2_CLK_SEL_MASK
 (0x3 << 12)

	)

207 
	#MXC_CCM_CSCMR1_SSI2_CLK_SEL_OFFSET
 12

	)

208 
	#MXC_CCM_CSCMR1_SSI1_CLK_SEL_MASK
 (0x3 << 10)

	)

209 
	#MXC_CCM_CSCMR1_SSI1_CLK_SEL_OFFSET
 10

	)

210 
	#MXC_CCM_CSCMR1_PERCLK_PODF_MASK
 0x3F

	)

213 
	#MXC_CCM_CSCMR2_ESAI_PRE_SEL_MASK
 (0x3 << 19)

	)

214 
	#MXC_CCM_CSCMR2_ESAI_PRE_SEL_OFFSET
 19

	)

215 
	#MXC_CCM_CSCMR2_LDB_DI1_IPU_DIV
 (1 << 11)

	)

216 
	#MXC_CCM_CSCMR2_LDB_DI0_IPU_DIV
 (1 << 10)

	)

217 
	#MXC_CCM_CSCMR2_CAN_CLK_SEL_MASK
 (0x3F << 2)

	)

218 
	#MXC_CCM_CSCMR2_CAN_CLK_SEL_OFFSET
 2

	)

221 
	#MXC_CCM_CSCDR1_VPU_AXI_PODF_MASK
 (0x7 << 25)

	)

222 
	#MXC_CCM_CSCDR1_VPU_AXI_PODF_OFFSET
 25

	)

223 
	#MXC_CCM_CSCDR1_USDHC4_PODF_MASK
 (0x7 << 22)

	)

224 
	#MXC_CCM_CSCDR1_USDHC4_PODF_OFFSET
 22

	)

225 
	#MXC_CCM_CSCDR1_USDHC3_PODF_MASK
 (0x7 << 19)

	)

226 
	#MXC_CCM_CSCDR1_USDHC3_PODF_OFFSET
 19

	)

227 
	#MXC_CCM_CSCDR1_USDHC2_PODF_MASK
 (0x7 << 16)

	)

228 
	#MXC_CCM_CSCDR1_USDHC2_PODF_OFFSET
 16

	)

229 
	#MXC_CCM_CSCDR1_USDHC1_PODF_MASK
 (0x7 << 11)

	)

230 
	#MXC_CCM_CSCDR1_USDHC1_PODF_OFFSET
 11

	)

231 
	#MXC_CCM_CSCDR1_USBOH3_CLK_PRED_OFFSET
 8

	)

232 
	#MXC_CCM_CSCDR1_USBOH3_CLK_PRED_MASK
 (0x7 << 8)

	)

233 
	#MXC_CCM_CSCDR1_USBOH3_CLK_PODF_OFFSET
 6

	)

234 
	#MXC_CCM_CSCDR1_USBOH3_CLK_PODF_MASK
 (0x3 << 6)

	)

235 #ifdeр
CONFIG_MX6SL


236 
	#MXC_CCM_CSCDR1_UART_CLK_PODF_MASK
 0x1F

	)

237 
	#MXC_CCM_CSCDR1_UART_CLK_SEL
 (1 << 6)

	)

239 
	#MXC_CCM_CSCDR1_UART_CLK_PODF_MASK
 0x3F

	)

241 
	#MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET
 0

	)

244 
	#MXC_CCM_CS1CDR_ESAI_CLK_PODF_MASK
 (0x3F << 25)

	)

245 
	#MXC_CCM_CS1CDR_ESAI_CLK_PODF_OFFSET
 25

	)

246 
	#MXC_CCM_CS1CDR_SSI3_CLK_PODF_MASK
 (0x3F << 16)

	)

247 
	#MXC_CCM_CS1CDR_SSI3_CLK_PODF_OFFSET
 16

	)

248 
	#MXC_CCM_CS1CDR_ESAI_CLK_PRED_MASK
 (0x3 << 9)

	)

249 
	#MXC_CCM_CS1CDR_ESAI_CLK_PRED_OFFSET
 9

	)

250 
	#MXC_CCM_CS1CDR_SSI1_CLK_PRED_MASK
 (0x7 << 6)

	)

251 
	#MXC_CCM_CS1CDR_SSI1_CLK_PRED_OFFSET
 6

	)

252 
	#MXC_CCM_CS1CDR_SSI1_CLK_PODF_MASK
 0x3F

	)

253 
	#MXC_CCM_CS1CDR_SSI1_CLK_PODF_OFFSET
 0

	)

256 
	#MXC_CCM_CS2CDR_ENFC_CLK_PODF_MASK
 (0x3F << 21)

	)

257 
	#MXC_CCM_CS2CDR_ENFC_CLK_PODF_OFFSET
 21

	)

258 
	#MXC_CCM_CS2CDR_ENFC_CLK_PODF
(
v
ш(((vш& 0x3fш<< 21)

	)

259 
	#MXC_CCM_CS2CDR_ENFC_CLK_PRED_MASK
 (0x7 << 18)

	)

260 
	#MXC_CCM_CS2CDR_ENFC_CLK_PRED_OFFSET
 18

	)

261 
	#MXC_CCM_CS2CDR_ENFC_CLK_PRED
(
v
ш(((vш& 0x7ш<< 18)

	)

262 
	#MXC_CCM_CS2CDR_ENFC_CLK_SEL_MASK
 (0x3 << 16)

	)

263 
	#MXC_CCM_CS2CDR_ENFC_CLK_SEL_OFFSET
 16

	)

264 
	#MXC_CCM_CS2CDR_ENFC_CLK_SEL
(
v
ш(((vш& 0x3ш<< 16)

	)

265 
	#MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_MASK
 (0x7 << 12)

	)

266 
	#MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_OFFSET
 12

	)

267 
	#MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_MASK
 (0x7 << 9)

	)

268 
	#MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_OFFSET
 9

	)

269 
	#MXC_CCM_CS2CDR_SSI2_CLK_PRED_MASK
 (0x7 << 6)

	)

270 
	#MXC_CCM_CS2CDR_SSI2_CLK_PRED_OFFSET
 6

	)

271 
	#MXC_CCM_CS2CDR_SSI2_CLK_PODF_MASK
 0x3F

	)

272 
	#MXC_CCM_CS2CDR_SSI2_CLK_PODF_OFFSET
 0

	)

275 
	#MXC_CCM_CDCDR_HSI_TX_PODF_MASK
 (0x7 << 29)

	)

276 
	#MXC_CCM_CDCDR_HSI_TX_PODF_OFFSET
 29

	)

277 
	#MXC_CCM_CDCDR_HSI_TX_CLK_SEL
 (1 << 28)

	)

278 
	#MXC_CCM_CDCDR_SPDIF0_CLK_PRED_MASK
 (0x7 << 25)

	)

279 
	#MXC_CCM_CDCDR_SPDIF0_CLK_PRED_OFFSET
 25

	)

280 
	#MXC_CCM_CDCDR_SPDIF0_CLK_PODF_MASK
 (0x7 << 19)

	)

281 
	#MXC_CCM_CDCDR_SPDIF0_CLK_PODF_OFFSET
 19

	)

282 
	#MXC_CCM_CDCDR_SPDIF0_CLK_SEL_MASK
 (0x3 << 20)

	)

283 
	#MXC_CCM_CDCDR_SPDIF0_CLK_SEL_OFFSET
 20

	)

284 
	#MXC_CCM_CDCDR_SPDIF1_CLK_PRED_MASK
 (0x7 << 12)

	)

285 
	#MXC_CCM_CDCDR_SPDIF1_CLK_PRED_OFFSET
 12

	)

286 
	#MXC_CCM_CDCDR_SPDIF1_CLK_PODF_MASK
 (0x7 << 9)

	)

287 
	#MXC_CCM_CDCDR_SPDIF1_CLK_PODF_OFFSET
 9

	)

288 
	#MXC_CCM_CDCDR_SPDIF1_CLK_SEL_MASK
 (0x3 << 7)

	)

289 
	#MXC_CCM_CDCDR_SPDIF1_CLK_SEL_OFFSET
 7

	)

292 
	#MXC_CCM_CHSCCDR_IPU1_DI1_PRE_CLK_SEL_MASK
 (0x7 << 15)

	)

293 
	#MXC_CCM_CHSCCDR_IPU1_DI1_PRE_CLK_SEL_OFFSET
 15

	)

294 
	#MXC_CCM_CHSCCDR_IPU1_DI1_PODF_MASK
 (0x7 << 12)

	)

295 
	#MXC_CCM_CHSCCDR_IPU1_DI1_PODF_OFFSET
 12

	)

296 
	#MXC_CCM_CHSCCDR_IPU1_DI1_CLK_SEL_MASK
 (0x7 << 9)

	)

297 
	#MXC_CCM_CHSCCDR_IPU1_DI1_CLK_SEL_OFFSET
 9

	)

298 
	#MXC_CCM_CHSCCDR_IPU1_DI0_PRE_CLK_SEL_MASK
 (0x7 << 6)

	)

299 
	#MXC_CCM_CHSCCDR_IPU1_DI0_PRE_CLK_SEL_OFFSET
 6

	)

300 
	#MXC_CCM_CHSCCDR_IPU1_DI0_PODF_MASK
 (0x7 << 3)

	)

301 
	#MXC_CCM_CHSCCDR_IPU1_DI0_PODF_OFFSET
 3

	)

302 
	#MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_MASK
 (0x7)

	)

303 
	#MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET
 0

	)

305 
	#CHSCCDR_CLK_SEL_LDB_DI0
 3

	)

306 
	#CHSCCDR_PODF_DIVIDE_BY_3
 2

	)

307 
	#CHSCCDR_IPU_PRE_CLK_540M_PFD
 5

	)

310 
	#MXC_CCM_CSCDR2_ECSPI_CLK_PODF_MASK
 (0x3F << 19)

	)

311 
	#MXC_CCM_CSCDR2_ECSPI_CLK_PODF_OFFSET
 19

	)

312 
	#MXC_CCM_CHSCCDR_IPU2_DI1_PRE_CLK_SEL_MASK
 (0x7 << 15)

	)

313 
	#MXC_CCM_CHSCCDR_IPU2_DI1_PRE_CLK_SEL_OFFSET
 15

	)

314 
	#MXC_CCM_CHSCCDR_IPU2_DI1_PODF_MASK
 (0x7 << 12)

	)

315 
	#MXC_CCM_CHSCCDR_IPU2_DI1_PODF_OFFSET
 12

	)

316 
	#MXC_CCM_CHSCCDR_IPU2_DI1_CLK_SEL_MASK
 (0x7 << 9)

	)

317 
	#MXC_CCM_CHSCCDR_IPU2_DI1_CLK_SEL_OFFSET
 9

	)

318 
	#MXC_CCM_CHSCCDR_IPU2_DI0_PRE_CLK_SEL_MASK
 (0x7 << 6)

	)

319 
	#MXC_CCM_CHSCCDR_IPU2_DI0_PRE_CLK_SEL_OFFSET
 6

	)

320 
	#MXC_CCM_CHSCCDR_IPU2_DI0_PODF_MASK
 (0x7 << 3)

	)

321 
	#MXC_CCM_CHSCCDR_IPU2_DI0_PODF_OFFSET
 3

	)

322 
	#MXC_CCM_CHSCCDR_IPU2_DI0_CLK_SEL_MASK
 0x7

	)

323 
	#MXC_CCM_CHSCCDR_IPU2_DI0_CLK_SEL_OFFSET
 0

	)

326 
	#MXC_CCM_CSCDR3_IPU2_HSP_PODF_MASK
 (0x7 << 16)

	)

327 
	#MXC_CCM_CSCDR3_IPU2_HSP_PODF_OFFSET
 16

	)

328 
	#MXC_CCM_CSCDR3_IPU2_HSP_CLK_SEL_MASK
 (0x3 << 14)

	)

329 
	#MXC_CCM_CSCDR3_IPU2_HSP_CLK_SEL_OFFSET
 14

	)

330 
	#MXC_CCM_CSCDR3_IPU1_HSP_PODF_MASK
 (0x7 << 11)

	)

331 
	#MXC_CCM_CSCDR3_IPU1_HSP_PODF_OFFSET
 11

	)

332 
	#MXC_CCM_CSCDR3_IPU1_HSP_CLK_SEL_MASK
 (0x3 << 9)

	)

333 
	#MXC_CCM_CSCDR3_IPU1_HSP_CLK_SEL_OFFSET
 9

	)

336 
	#MXC_CCM_CDHIPR_ARM_PODF_BUSY
 (1 << 16)

	)

337 
	#MXC_CCM_CDHIPR_PERIPH_CLK_SEL_BUSY
 (1 << 5)

	)

338 
	#MXC_CCM_CDHIPR_MMDC_CH0_PODF_BUSY
 (1 << 4)

	)

339 
	#MXC_CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY
 (1 << 3)

	)

340 
	#MXC_CCM_CDHIPR_MMDC_CH1_PODF_BUSY
 (1 << 2)

	)

341 
	#MXC_CCM_CDHIPR_AHB_PODF_BUSY
 (1 << 1)

	)

342 
	#MXC_CCM_CDHIPR_AXI_PODF_BUSY
 1

	)

345 
	#MXC_CCM_CLPCR_MASK_L2CC_IDLE
 (1 << 27)

	)

346 
	#MXC_CCM_CLPCR_MASK_SCU_IDLE
 (1 << 26)

	)

347 
	#MXC_CCM_CLPCR_MASK_CORE3_WFI
 (1 << 25)

	)

348 
	#MXC_CCM_CLPCR_MASK_CORE2_WFI
 (1 << 24)

	)

349 
	#MXC_CCM_CLPCR_MASK_CORE1_WFI
 (1 << 23)

	)

350 
	#MXC_CCM_CLPCR_MASK_CORE0_WFI
 (1 << 22)

	)

351 
	#MXC_CCM_CLPCR_BYP_MMDC_CH1_LPM_HS
 (1 << 21)

	)

352 
	#MXC_CCM_CLPCR_BYP_MMDC_CH0_LPM_HS
 (1 << 19)

	)

353 
	#MXC_CCM_CLPCR_WB_CORE_AT_LPM
 (1 << 17)

	)

354 
	#MXC_CCM_CLPCR_WB_PER_AT_LPM
 (1 << 17)

	)

355 
	#MXC_CCM_CLPCR_COSC_PWRDOWN
 (1 << 11)

	)

356 
	#MXC_CCM_CLPCR_STBY_COUNT_MASK
 (0x3 << 9)

	)

357 
	#MXC_CCM_CLPCR_STBY_COUNT_OFFSET
 9

	)

358 
	#MXC_CCM_CLPCR_VSTBY
 (1 << 8)

	)

359 
	#MXC_CCM_CLPCR_DIS_REF_OSC
 (1 << 7)

	)

360 
	#MXC_CCM_CLPCR_SBYOS
 (1 << 6)

	)

361 
	#MXC_CCM_CLPCR_ARM_CLK_DIS_ON_LPM
 (1 << 5)

	)

362 
	#MXC_CCM_CLPCR_LPSR_CLK_SEL_MASK
 (0x3 << 3)

	)

363 
	#MXC_CCM_CLPCR_LPSR_CLK_SEL_OFFSET
 3

	)

364 
	#MXC_CCM_CLPCR_BYPASS_PMIC_VFUNC_READY
 (1 << 2)

	)

365 
	#MXC_CCM_CLPCR_LPM_MASK
 0x3

	)

366 
	#MXC_CCM_CLPCR_LPM_OFFSET
 0

	)

369 
	#MXC_CCM_CISR_ARM_PODF_LOADED
 (1 << 26)

	)

370 
	#MXC_CCM_CISR_MMDC_CH0_PODF_LOADED
 (1 << 23)

	)

371 
	#MXC_CCM_CISR_PERIPH_CLK_SEL_LOADED
 (1 << 22)

	)

372 
	#MXC_CCM_CISR_MMDC_CH1_PODF_LOADED
 (1 << 21)

	)

373 
	#MXC_CCM_CISR_AHB_PODF_LOADED
 (1 << 20)

	)

374 
	#MXC_CCM_CISR_PERIPH2_CLK_SEL_LOADED
 (1 << 19)

	)

375 
	#MXC_CCM_CISR_AXI_PODF_LOADED
 (1 << 17)

	)

376 
	#MXC_CCM_CISR_COSC_READY
 (1 << 6)

	)

377 
	#MXC_CCM_CISR_LRF_PLL
 1

	)

380 
	#MXC_CCM_CIMR_MASK_ARM_PODF_LOADED
 (1 << 26)

	)

381 
	#MXC_CCM_CIMR_MASK_MMDC_CH0_PODF_LOADED
 (1 << 23)

	)

382 
	#MXC_CCM_CIMR_MASK_PERIPH_CLK_SEL_LOADED
 (1 << 22)

	)

383 
	#MXC_CCM_CIMR_MASK_MMDC_CH1_PODF_LOADED
 (1 << 21)

	)

384 
	#MXC_CCM_CIMR_MASK_AHB_PODF_LOADED
 (1 << 20)

	)

385 
	#MXC_CCM_CIMR_MASK_PERIPH2_CLK_SEL_LOADED
 (1 << 22)

	)

386 
	#MXC_CCM_CIMR_MASK_AXI_PODF_LOADED
 (1 << 17)

	)

387 
	#MXC_CCM_CIMR_MASK_COSC_READY
 (1 << 6)

	)

388 
	#MXC_CCM_CIMR_MASK_LRF_PLL
 1

	)

391 
	#MXC_CCM_CCOSR_CKO2_EN_OFFSET
 (1 << 24)

	)

392 
	#MXC_CCM_CCOSR_CKO2_DIV_MASK
 (0x7 << 21)

	)

393 
	#MXC_CCM_CCOSR_CKO2_DIV_OFFSET
 21

	)

394 
	#MXC_CCM_CCOSR_CKO2_SEL_OFFSET
 16

	)

395 
	#MXC_CCM_CCOSR_CKO2_SEL_MASK
 (0x1F << 16)

	)

396 
	#MXC_CCM_CCOSR_CKOL_EN
 (0x1 << 7)

	)

397 
	#MXC_CCM_CCOSR_CKOL_DIV_MASK
 (0x7 << 4)

	)

398 
	#MXC_CCM_CCOSR_CKOL_DIV_OFFSET
 4

	)

399 
	#MXC_CCM_CCOSR_CKOL_SEL_MASK
 0xF

	)

400 
	#MXC_CCM_CCOSR_CKOL_SEL_OFFSET
 0

	)

403 
	#MXC_CCM_CGPR_EFUSE_PROG_SUPPLY_GATE
 (1 << 4)

	)

404 
	#MXC_CCM_CGPR_MMDC_EXT_CLK_DIS
 (1 << 2)

	)

405 
	#MXC_CCM_CGPR_PMIC_DELAY_SCALER
 1

	)

408 
	#MXC_CCM_CCGR_CG_MASK
 3

	)

410 
	#MXC_CCM_CCGR0_AIPS_TZ1_OFFSET
 0

	)

411 
	#MXC_CCM_CCGR0_AIPS_TZ1_MASK
 (3 << 
MXC_CCM_CCGR0_AIPS_TZ1_OFFSET
)

	)

412 
	#MXC_CCM_CCGR0_AIPS_TZ2_OFFSET
 2

	)

413 
	#MXC_CCM_CCGR0_AIPS_TZ2_MASK
 (3 << 
MXC_CCM_CCGR0_AIPS_TZ2_OFFSET
)

	)

414 
	#MXC_CCM_CCGR0_APBHDMA_OFFSET
 4

	)

415 
	#MXC_CCM_CCGR0_APBHDMA_MASK
 (3 << 
MXC_CCM_CCGR0_APBHDMA_OFFSET
)

	)

416 
	#MXC_CCM_CCGR0_ASRC_OFFSET
 6

	)

417 
	#MXC_CCM_CCGR0_ASRC_MASK
 (3 << 
MXC_CCM_CCGR0_ASRC_OFFSET
)

	)

418 
	#MXC_CCM_CCGR0_CAAM_SECURE_MEM_OFFSET
 8

	)

419 
	#MXC_CCM_CCGR0_CAAM_SECURE_MEM_MASK
 (3 << 
MXC_CCM_CCGR0_CAAM_SECURE_MEM_OFFSET
)

	)

420 
	#MXC_CCM_CCGR0_CAAM_WRAPPER_ACLK_OFFSET
 10

	)

421 
	#MXC_CCM_CCGR0_CAAM_WRAPPER_ACLK_MASK
 (3 << 
MXC_CCM_CCGR0_CAAM_WRAPPER_ACLK_OFFSET
)

	)

422 
	#MXC_CCM_CCGR0_CAAM_WRAPPER_IPG_OFFSET
 12

	)

423 
	#MXC_CCM_CCGR0_CAAM_WRAPPER_IPG_MASK
 (3 << 
MXC_CCM_CCGR0_CAAM_WRAPPER_IPG_OFFSET
)

	)

424 
	#MXC_CCM_CCGR0_CAN1_OFFSET
 14

	)

425 
	#MXC_CCM_CCGR0_CAN1_MASK
 (3 << 
MXC_CCM_CCGR0_CAN1_OFFSET
)

	)

426 
	#MXC_CCM_CCGR0_CAN1_SERIAL_OFFSET
 16

	)

427 
	#MXC_CCM_CCGR0_CAN1_SERIAL_MASK
 (3 << 
MXC_CCM_CCGR0_CAN1_SERIAL_OFFSET
)

	)

428 
	#MXC_CCM_CCGR0_CAN2_OFFSET
 18

	)

429 
	#MXC_CCM_CCGR0_CAN2_MASK
 (3 << 
MXC_CCM_CCGR0_CAN2_OFFSET
)

	)

430 
	#MXC_CCM_CCGR0_CAN2_SERIAL_OFFSET
 20

	)

431 
	#MXC_CCM_CCGR0_CAN2_SERIAL_MASK
 (3 << 
MXC_CCM_CCGR0_CAN2_SERIAL_OFFSET
)

	)

432 
	#MXC_CCM_CCGR0_CHEETAH_DBG_CLK_OFFSET
 22

	)

433 
	#MXC_CCM_CCGR0_CHEETAH_DBG_CLK_MASK
 (3 << 
MXC_CCM_CCGR0_CHEETAH_DBG_CLK_OFFSET
)

	)

434 
	#MXC_CCM_CCGR0_DCIC1_OFFSET
 24

	)

435 
	#MXC_CCM_CCGR0_DCIC1_MASK
 (3 << 
MXC_CCM_CCGR0_DCIC1_OFFSET
)

	)

436 
	#MXC_CCM_CCGR0_DCIC2_OFFSET
 26

	)

437 
	#MXC_CCM_CCGR0_DCIC2_MASK
 (3 << 
MXC_CCM_CCGR0_DCIC2_OFFSET
)

	)

438 
	#MXC_CCM_CCGR0_DTCP_OFFSET
 28

	)

439 
	#MXC_CCM_CCGR0_DTCP_MASK
 (3 << 
MXC_CCM_CCGR0_DTCP_OFFSET
)

	)

441 
	#MXC_CCM_CCGR1_ECSPI1S_OFFSET
 0

	)

442 
	#MXC_CCM_CCGR1_ECSPI1S_MASK
 (3 << 
MXC_CCM_CCGR1_ECSPI1S_OFFSET
)

	)

443 
	#MXC_CCM_CCGR1_ECSPI2S_OFFSET
 2

	)

444 
	#MXC_CCM_CCGR1_ECSPI2S_MASK
 (3 << 
MXC_CCM_CCGR1_ECSPI2S_OFFSET
)

	)

445 
	#MXC_CCM_CCGR1_ECSPI3S_OFFSET
 4

	)

446 
	#MXC_CCM_CCGR1_ECSPI3S_MASK
 (3 << 
MXC_CCM_CCGR1_ECSPI3S_OFFSET
)

	)

447 
	#MXC_CCM_CCGR1_ECSPI4S_OFFSET
 6

	)

448 
	#MXC_CCM_CCGR1_ECSPI4S_MASK
 (3 << 
MXC_CCM_CCGR1_ECSPI4S_OFFSET
)

	)

449 
	#MXC_CCM_CCGR1_ECSPI5S_OFFSET
 8

	)

450 
	#MXC_CCM_CCGR1_ECSPI5S_MASK
 (3 << 
MXC_CCM_CCGR1_ECSPI5S_OFFSET
)

	)

451 
	#MXC_CCM_CCGR1_ENET_CLK_ENABLE_OFFSET
 10

	)

452 
	#MXC_CCM_CCGR1_ENET_CLK_ENABLE_MASK
 (3 << 
MXC_CCM_CCGR1_ENET_CLK_ENABLE_OFFSET
)

	)

453 
	#MXC_CCM_CCGR1_EPIT1S_OFFSET
 12

	)

454 
	#MXC_CCM_CCGR1_EPIT1S_MASK
 (3 << 
MXC_CCM_CCGR1_EPIT1S_OFFSET
)

	)

455 
	#MXC_CCM_CCGR1_EPIT2S_OFFSET
 14

	)

456 
	#MXC_CCM_CCGR1_EPIT2S_MASK
 (3 << 
MXC_CCM_CCGR1_EPIT2S_OFFSET
)

	)

457 
	#MXC_CCM_CCGR1_ESAIS_OFFSET
 16

	)

458 
	#MXC_CCM_CCGR1_ESAIS_MASK
 (3 << 
MXC_CCM_CCGR1_ESAIS_OFFSET
)

	)

459 
	#MXC_CCM_CCGR1_GPT_BUS_OFFSET
 20

	)

460 
	#MXC_CCM_CCGR1_GPT_BUS_MASK
 (3 << 
MXC_CCM_CCGR1_GPT_BUS_OFFSET
)

	)

461 
	#MXC_CCM_CCGR1_GPT_SERIAL_OFFSET
 22

	)

462 
	#MXC_CCM_CCGR1_GPT_SERIAL_MASK
 (3 << 
MXC_CCM_CCGR1_GPT_SERIAL_OFFSET
)

	)

463 
	#MXC_CCM_CCGR1_GPU2D_OFFSET
 24

	)

464 
	#MXC_CCM_CCGR1_GPU2D_MASK
 (3 << 
MXC_CCM_CCGR1_GPU2D_OFFSET
)

	)

465 
	#MXC_CCM_CCGR1_GPU3D_OFFSET
 26

	)

466 
	#MXC_CCM_CCGR1_GPU3D_MASK
 (3 << 
MXC_CCM_CCGR1_GPU3D_OFFSET
)

	)

468 
	#MXC_CCM_CCGR2_HDMI_TX_IAHBCLK_OFFSET
 0

	)

469 
	#MXC_CCM_CCGR2_HDMI_TX_IAHBCLK_MASK
 (3 << 
MXC_CCM_CCGR2_HDMI_TX_IAHBCLK_OFFSET
)

	)

470 
	#MXC_CCM_CCGR2_HDMI_TX_ISFRCLK_OFFSET
 4

	)

471 
	#MXC_CCM_CCGR2_HDMI_TX_ISFRCLK_MASK
 (3 << 
MXC_CCM_CCGR2_HDMI_TX_ISFRCLK_OFFSET
)

	)

472 
	#MXC_CCM_CCGR2_I2C1_SERIAL_OFFSET
 6

	)

473 
	#MXC_CCM_CCGR2_I2C1_SERIAL_MASK
 (3 << 
MXC_CCM_CCGR2_I2C1_SERIAL_OFFSET
)

	)

474 
	#MXC_CCM_CCGR2_I2C2_SERIAL_OFFSET
 8

	)

475 
	#MXC_CCM_CCGR2_I2C2_SERIAL_MASK
 (3 << 
MXC_CCM_CCGR2_I2C2_SERIAL_OFFSET
)

	)

476 
	#MXC_CCM_CCGR2_I2C3_SERIAL_OFFSET
 10

	)

477 
	#MXC_CCM_CCGR2_I2C3_SERIAL_MASK
 (3 << 
MXC_CCM_CCGR2_I2C3_SERIAL_OFFSET
)

	)

478 
	#MXC_CCM_CCGR2_OCOTP_CTRL_OFFSET
 12

	)

479 
	#MXC_CCM_CCGR2_OCOTP_CTRL_MASK
 (3 << 
MXC_CCM_CCGR2_OCOTP_CTRL_OFFSET
)

	)

480 
	#MXC_CCM_CCGR2_IOMUX_IPT_CLK_IO_OFFSET
 14

	)

481 
	#MXC_CCM_CCGR2_IOMUX_IPT_CLK_IO_MASK
 (3 << 
MXC_CCM_CCGR2_IOMUX_IPT_CLK_IO_OFFSET
)

	)

482 
	#MXC_CCM_CCGR2_IPMUX1_OFFSET
 16

	)

483 
	#MXC_CCM_CCGR2_IPMUX1_MASK
 (3 << 
MXC_CCM_CCGR2_IPMUX1_OFFSET
)

	)

484 
	#MXC_CCM_CCGR2_IPMUX2_OFFSET
 18

	)

485 
	#MXC_CCM_CCGR2_IPMUX2_MASK
 (3 << 
MXC_CCM_CCGR2_IPMUX2_OFFSET
)

	)

486 
	#MXC_CCM_CCGR2_IPMUX3_OFFSET
 20

	)

487 
	#MXC_CCM_CCGR2_IPMUX3_MASK
 (3 << 
MXC_CCM_CCGR2_IPMUX3_OFFSET
)

	)

488 
	#MXC_CCM_CCGR2_IPSYNC_IP2APB_TZASC1_IPGS_OFFSET
 22

	)

489 
	#MXC_CCM_CCGR2_IPSYNC_IP2APB_TZASC1_IPGS_MASK
 (3 << 
MXC_CCM_CCGR2_IPSYNC_IP2APB_TZASC1_IPGS_OFFSET
)

	)

490 
	#MXC_CCM_CCGR2_IPSYNC_IP2APB_TZASC2_IPG_OFFSET
 24

	)

491 
	#MXC_CCM_CCGR2_IPSYNC_IP2APB_TZASC2_IPG_MASK
 (3 << 
MXC_CCM_CCGR2_IPSYNC_IP2APB_TZASC2_IPG_OFFSET
)

	)

492 
	#MXC_CCM_CCGR2_IPSYNC_VDOA_IPG_MASTER_CLK_OFFSET
 26

	)

493 
	#MXC_CCM_CCGR2_IPSYNC_VDOA_IPG_MASTER_CLK_MASK
 (3 << 
MXC_CCM_CCGR2_IPSYNC_VDOA_IPG_MASTER_CLK_OFFSET
)

	)

495 
	#MXC_CCM_CCGR3_IPU1_IPU_OFFSET
 0

	)

496 
	#MXC_CCM_CCGR3_IPU1_IPU_MASK
 (3 << 
MXC_CCM_CCGR3_IPU1_IPU_OFFSET
)

	)

497 
	#MXC_CCM_CCGR3_IPU1_IPU_DI0_OFFSET
 2

	)

498 
	#MXC_CCM_CCGR3_IPU1_IPU_DI0_MASK
 (3 << 
MXC_CCM_CCGR3_IPU1_IPU_DI0_OFFSET
)

	)

499 
	#MXC_CCM_CCGR3_IPU1_IPU_DI1_OFFSET
 4

	)

500 
	#MXC_CCM_CCGR3_IPU1_IPU_DI1_MASK
 (3 << 
MXC_CCM_CCGR3_IPU1_IPU_DI1_OFFSET
)

	)

501 
	#MXC_CCM_CCGR3_IPU2_IPU_OFFSET
 6

	)

502 
	#MXC_CCM_CCGR3_IPU2_IPU_MASK
 (3 << 
MXC_CCM_CCGR3_IPU2_IPU_OFFSET
)

	)

503 
	#MXC_CCM_CCGR3_IPU2_IPU_DI0_OFFSET
 8

	)

504 
	#MXC_CCM_CCGR3_IPU2_IPU_DI0_MASK
 (3 << 
MXC_CCM_CCGR3_IPU2_IPU_DI0_OFFSET
)

	)

505 
	#MXC_CCM_CCGR3_IPU2_IPU_DI1_OFFSET
 10

	)

506 
	#MXC_CCM_CCGR3_IPU2_IPU_DI1_MASK
 (3 << 
MXC_CCM_CCGR3_IPU2_IPU_DI1_OFFSET
)

	)

507 
	#MXC_CCM_CCGR3_LDB_DI0_OFFSET
 12

	)

508 
	#MXC_CCM_CCGR3_LDB_DI0_MASK
 (3 << 
MXC_CCM_CCGR3_LDB_DI0_OFFSET
)

	)

509 
	#MXC_CCM_CCGR3_LDB_DI1_OFFSET
 14

	)

510 
	#MXC_CCM_CCGR3_LDB_DI1_MASK
 (3 << 
MXC_CCM_CCGR3_LDB_DI1_OFFSET
)

	)

511 
	#MXC_CCM_CCGR3_MIPI_CORE_CFG_OFFSET
 16

	)

512 
	#MXC_CCM_CCGR3_MIPI_CORE_CFG_MASK
 (3 << 
MXC_CCM_CCGR3_MIPI_CORE_CFG_OFFSET
)

	)

513 
	#MXC_CCM_CCGR3_MLB_OFFSET
 18

	)

514 
	#MXC_CCM_CCGR3_MLB_MASK
 (3 << 
MXC_CCM_CCGR3_MLB_OFFSET
)

	)

515 
	#MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_CORE_P0_OFFSET
 20

	)

516 
	#MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_CORE_P0_MASK
 (3 << 
MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_CORE_P0_OFFSET
)

	)

517 
	#MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_CORE_P1_OFFSET
 22

	)

518 
	#MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_CORE_P1_MASK
 (3 << 
MXC_CCM_CCGR3_MMDC_CORE_ACLK_FAST_CORE_P1_OFFSET
)

	)

519 
	#MXC_CCM_CCGR3_MMDC_CORE_IPG_CLK_P0_OFFSET
 24

	)

520 
	#MXC_CCM_CCGR3_MMDC_CORE_IPG_CLK_P0_MASK
 (3 << 
MXC_CCM_CCGR3_MMDC_CORE_IPG_CLK_P0_OFFSET
)

	)

521 
	#MXC_CCM_CCGR3_MMDC_CORE_IPG_CLK_P1_OFFSET
 26

	)

522 
	#MXC_CCM_CCGR3_MMDC_CORE_IPG_CLK_P1_MASK
 (3 << 
MXC_CCM_CCGR3_MMDC_CORE_IPG_CLK_P1_OFFSET
)

	)

523 
	#MXC_CCM_CCGR3_OCRAM_OFFSET
 28

	)

524 
	#MXC_CCM_CCGR3_OCRAM_MASK
 (3 << 
MXC_CCM_CCGR3_OCRAM_OFFSET
)

	)

525 
	#MXC_CCM_CCGR3_OPENVGAXICLK_OFFSET
 30

	)

526 
	#MXC_CCM_CCGR3_OPENVGAXICLK_MASK
 (3 << 
MXC_CCM_CCGR3_OPENVGAXICLK_OFFSET
)

	)

528 
	#MXC_CCM_CCGR4_PCIE_OFFSET
 0

	)

529 
	#MXC_CCM_CCGR4_PCIE_MASK
 (3 << 
MXC_CCM_CCGR4_PCIE_OFFSET
)

	)

530 
	#MXC_CCM_CCGR4_PL301_MX6QFAST1_S133_OFFSET
 8

	)

531 
	#MXC_CCM_CCGR4_PL301_MX6QFAST1_S133_MASK
 (3 << 
MXC_CCM_CCGR4_PL301_MX6QFAST1_S133_OFFSET
)

	)

532 
	#MXC_CCM_CCGR4_PL301_MX6QPER1_BCH_OFFSET
 12

	)

533 
	#MXC_CCM_CCGR4_PL301_MX6QPER1_BCH_MASK
 (3 << 
MXC_CCM_CCGR4_PL301_MX6QPER1_BCH_OFFSET
)

	)

534 
	#MXC_CCM_CCGR4_PL301_MX6QPER2_MAINCLK_ENABLE_OFFSET
 14

	)

535 
	#MXC_CCM_CCGR4_PL301_MX6QPER2_MAINCLK_ENABLE_MASK
 (3 << 
MXC_CCM_CCGR4_PL301_MX6QPER2_MAINCLK_ENABLE_OFFSET
)

	)

536 
	#MXC_CCM_CCGR4_PWM1_OFFSET
 16

	)

537 
	#MXC_CCM_CCGR4_PWM1_MASK
 (3 << 
MXC_CCM_CCGR4_PWM1_OFFSET
)

	)

538 
	#MXC_CCM_CCGR4_PWM2_OFFSET
 18

	)

539 
	#MXC_CCM_CCGR4_PWM2_MASK
 (3 << 
MXC_CCM_CCGR4_PWM2_OFFSET
)

	)

540 
	#MXC_CCM_CCGR4_PWM3_OFFSET
 20

	)

541 
	#MXC_CCM_CCGR4_PWM3_MASK
 (3 << 
MXC_CCM_CCGR4_PWM3_OFFSET
)

	)

542 
	#MXC_CCM_CCGR4_PWM4_OFFSET
 22

	)

543 
	#MXC_CCM_CCGR4_PWM4_MASK
 (3 << 
MXC_CCM_CCGR4_PWM4_OFFSET
)

	)

544 
	#MXC_CCM_CCGR4_RAWNAND_U_BCH_INPUT_APB_OFFSET
 24

	)

545 
	#MXC_CCM_CCGR4_RAWNAND_U_BCH_INPUT_APB_MASK
 (3 << 
MXC_CCM_CCGR4_RAWNAND_U_BCH_INPUT_APB_OFFSET
)

	)

546 
	#MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_BCH_OFFSET
 26

	)

547 
	#MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_BCH_MASK
 (3 << 
MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_BCH_OFFSET
)

	)

548 
	#MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_GPMI_IO_OFFSET
 28

	)

549 
	#MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_GPMI_IO_MASK
 (3 << 
MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_GPMI_IO_OFFSET
)

	)

550 
	#MXC_CCM_CCGR4_RAWNAND_U_GPMI_INPUT_APB_OFFSET
 30

	)

551 
	#MXC_CCM_CCGR4_RAWNAND_U_GPMI_INPUT_APB_MASK
 (3 << 
MXC_CCM_CCGR4_RAWNAND_U_GPMI_INPUT_APB_OFFSET
)

	)

553 
	#MXC_CCM_CCGR5_ROM_OFFSET
 0

	)

554 
	#MXC_CCM_CCGR5_ROM_MASK
 (3 << 
MXC_CCM_CCGR5_ROM_OFFSET
)

	)

555 
	#MXC_CCM_CCGR5_SATA_OFFSET
 4

	)

556 
	#MXC_CCM_CCGR5_SATA_MASK
 (3 << 
MXC_CCM_CCGR5_SATA_OFFSET
)

	)

557 
	#MXC_CCM_CCGR5_SDMA_OFFSET
 6

	)

558 
	#MXC_CCM_CCGR5_SDMA_MASK
 (3 << 
MXC_CCM_CCGR5_SDMA_OFFSET
)

	)

559 
	#MXC_CCM_CCGR5_SPBA_OFFSET
 12

	)

560 
	#MXC_CCM_CCGR5_SPBA_MASK
 (3 << 
MXC_CCM_CCGR5_SPBA_OFFSET
)

	)

561 
	#MXC_CCM_CCGR5_SPDIF_OFFSET
 14

	)

562 
	#MXC_CCM_CCGR5_SPDIF_MASK
 (3 << 
MXC_CCM_CCGR5_SPDIF_OFFSET
)

	)

563 
	#MXC_CCM_CCGR5_SSI1_OFFSET
 18

	)

564 
	#MXC_CCM_CCGR5_SSI1_MASK
 (3 << 
MXC_CCM_CCGR5_SSI1_OFFSET
)

	)

565 
	#MXC_CCM_CCGR5_SSI2_OFFSET
 20

	)

566 
	#MXC_CCM_CCGR5_SSI2_MASK
 (3 << 
MXC_CCM_CCGR5_SSI2_OFFSET
)

	)

567 
	#MXC_CCM_CCGR5_SSI3_OFFSET
 22

	)

568 
	#MXC_CCM_CCGR5_SSI3_MASK
 (3 << 
MXC_CCM_CCGR5_SSI3_OFFSET
)

	)

569 
	#MXC_CCM_CCGR5_UART_OFFSET
 24

	)

570 
	#MXC_CCM_CCGR5_UART_MASK
 (3 << 
MXC_CCM_CCGR5_UART_OFFSET
)

	)

571 
	#MXC_CCM_CCGR5_UART_SERIAL_OFFSET
 26

	)

572 
	#MXC_CCM_CCGR5_UART_SERIAL_MASK
 (3 << 
MXC_CCM_CCGR5_UART_SERIAL_OFFSET
)

	)

574 
	#MXC_CCM_CCGR6_USBOH3_OFFSET
 0

	)

575 
	#MXC_CCM_CCGR6_USBOH3_MASK
 (3 << 
MXC_CCM_CCGR6_USBOH3_OFFSET
)

	)

576 
	#MXC_CCM_CCGR6_USDHC1_OFFSET
 2

	)

577 
	#MXC_CCM_CCGR6_USDHC1_MASK
 (3 << 
MXC_CCM_CCGR6_USDHC1_OFFSET
)

	)

578 
	#MXC_CCM_CCGR6_USDHC2_OFFSET
 4

	)

579 
	#MXC_CCM_CCGR6_USDHC2_MASK
 (3 << 
MXC_CCM_CCGR6_USDHC2_OFFSET
)

	)

580 
	#MXC_CCM_CCGR6_USDHC3_OFFSET
 6

	)

581 
	#MXC_CCM_CCGR6_USDHC3_MASK
 (3 << 
MXC_CCM_CCGR6_USDHC3_OFFSET
)

	)

582 
	#MXC_CCM_CCGR6_USDHC4_OFFSET
 8

	)

583 
	#MXC_CCM_CCGR6_USDHC4_MASK
 (3 << 
MXC_CCM_CCGR6_USDHC4_OFFSET
)

	)

584 
	#MXC_CCM_CCGR6_EMI_SLOW_OFFSET
 10

	)

585 
	#MXC_CCM_CCGR6_EMI_SLOW_MASK
 (3 << 
MXC_CCM_CCGR6_EMI_SLOW_OFFSET
)

	)

586 
	#MXC_CCM_CCGR6_VDOAXICLK_OFFSET
 12

	)

587 
	#MXC_CCM_CCGR6_VDOAXICLK_MASK
 (3 << 
MXC_CCM_CCGR6_VDOAXICLK_OFFSET
)

	)

589 
	#BM_ANADIG_PLL_SYS_LOCK
 0x80000000

	)

590 
	#BP_ANADIG_PLL_SYS_RSVD0
 20

	)

591 
	#BM_ANADIG_PLL_SYS_RSVD0
 0x7FF00000

	)

592 
	#BF_ANADIG_PLL_SYS_RSVD0
(
v
) \

593 (((
v
ш<< 20ш& 
BM_ANADIG_PLL_SYS_RSVD0
)

	)

594 
	#BM_ANADIG_PLL_SYS_PLL_SEL
 0x00080000

	)

595 
	#BM_ANADIG_PLL_SYS_LVDS_24MHZ_SEL
 0x00040000

	)

596 
	#BM_ANADIG_PLL_SYS_LVDS_SEL
 0x00020000

	)

597 
	#BM_ANADIG_PLL_SYS_BYPASS
 0x00010000

	)

598 
	#BP_ANADIG_PLL_SYS_BYPASS_CLK_SRC
 14

	)

599 
	#BM_ANADIG_PLL_SYS_BYPASS_CLK_SRC
 0x0000C000

	)

600 
	#BF_ANADIG_PLL_SYS_BYPASS_CLK_SRC
(
v
) \

601 (((
v
ш<< 14ш& 
BM_ANADIG_PLL_SYS_BYPASS_CLK_SRC
)

	)

602 
	#BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__OSC_24M
 0x0

	)

603 
	#BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__ANACLK_1
 0x1

	)

604 
	#BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__ANACLK_2
 0x2

	)

605 
	#BV_ANADIG_PLL_SYS_BYPASS_CLK_SRC__XOR
 0x3

	)

606 
	#BM_ANADIG_PLL_SYS_ENABLE
 0x00002000

	)

607 
	#BM_ANADIG_PLL_SYS_POWERDOWN
 0x00001000

	)

608 
	#BM_ANADIG_PLL_SYS_HOLD_RING_OFF
 0x00000800

	)

609 
	#BM_ANADIG_PLL_SYS_DOUBLE_CP
 0x00000400

	)

610 
	#BM_ANADIG_PLL_SYS_HALF_CP
 0x00000200

	)

611 
	#BM_ANADIG_PLL_SYS_DOUBLE_LF
 0x00000100

	)

612 
	#BM_ANADIG_PLL_SYS_HALF_LF
 0x00000080

	)

613 
	#BP_ANADIG_PLL_SYS_DIV_SELECT
 0

	)

614 
	#BM_ANADIG_PLL_SYS_DIV_SELECT
 0x0000007F

	)

615 
	#BF_ANADIG_PLL_SYS_DIV_SELECT
(
v
) \

616 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_SYS_DIV_SELECT
)

	)

618 
	#BM_ANADIG_USB1_PLL_480_CTRL_LOCK
 0x80000000

	)

619 
	#BP_ANADIG_USB1_PLL_480_CTRL_RSVD1
 17

	)

620 
	#BM_ANADIG_USB1_PLL_480_CTRL_RSVD1
 0x7FFE0000

	)

621 
	#BF_ANADIG_USB1_PLL_480_CTRL_RSVD1
(
v
) \

622 (((
v
ш<< 17ш& 
BM_ANADIG_USB1_PLL_480_CTRL_RSVD1
)

	)

623 
	#BM_ANADIG_USB1_PLL_480_CTRL_BYPASS
 0x00010000

	)

624 
	#BP_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC
 14

	)

625 
	#BM_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC
 0x0000C000

	)

626 
	#BF_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC
(
v
) \

627 (((
v
ш<< 14ш& 
BM_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC
)

	)

628 
	#BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__OSC_24M
 0x0

	)

629 
	#BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__ANACLK_1
 0x1

	)

630 
	#BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__ANACLK_2
 0x2

	)

631 
	#BV_ANADIG_USB1_PLL_480_CTRL_BYPASS_CLK_SRC__XOR
 0x3

	)

632 
	#BM_ANADIG_USB1_PLL_480_CTRL_ENABLE
 0x00002000

	)

633 
	#BM_ANADIG_USB1_PLL_480_CTRL_POWER
 0x00001000

	)

634 
	#BM_ANADIG_USB1_PLL_480_CTRL_HOLD_RING_OFF
 0x00000800

	)

635 
	#BM_ANADIG_USB1_PLL_480_CTRL_DOUBLE_CP
 0x00000400

	)

636 
	#BM_ANADIG_USB1_PLL_480_CTRL_HALF_CP
 0x00000200

	)

637 
	#BM_ANADIG_USB1_PLL_480_CTRL_DOUBLE_LF
 0x00000100

	)

638 
	#BM_ANADIG_USB1_PLL_480_CTRL_HALF_LF
 0x00000080

	)

639 
	#BM_ANADIG_USB1_PLL_480_CTRL_EN_USB_CLKS
 0x00000040

	)

640 
	#BM_ANADIG_USB1_PLL_480_CTRL_RSVD0
 0x00000020

	)

641 
	#BP_ANADIG_USB1_PLL_480_CTRL_CONTROL0
 2

	)

642 
	#BM_ANADIG_USB1_PLL_480_CTRL_CONTROL0
 0x0000001C

	)

643 
	#BF_ANADIG_USB1_PLL_480_CTRL_CONTROL0
(
v
) \

644 (((
v
ш<< 2ш& 
BM_ANADIG_USB1_PLL_480_CTRL_CONTROL0
)

	)

645 
	#BP_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT
 0

	)

646 
	#BM_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT
 0x00000003

	)

647 
	#BF_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT
(
v
) \

648 (((
v
ш<< 0ш& 
BM_ANADIG_USB1_PLL_480_CTRL_DIV_SELECT
)

	)

650 
	#BM_ANADIG_PLL_528_LOCK
 0x80000000

	)

651 
	#BP_ANADIG_PLL_528_RSVD1
 19

	)

652 
	#BM_ANADIG_PLL_528_RSVD1
 0x7FF80000

	)

653 
	#BF_ANADIG_PLL_528_RSVD1
(
v
) \

654 (((
v
ш<< 19ш& 
BM_ANADIG_PLL_528_RSVD1
)

	)

655 
	#BM_ANADIG_PLL_528_PFD_OFFSET_EN
 0x00040000

	)

656 
	#BM_ANADIG_PLL_528_DITHER_ENABLE
 0x00020000

	)

657 
	#BM_ANADIG_PLL_528_BYPASS
 0x00010000

	)

658 
	#BP_ANADIG_PLL_528_BYPASS_CLK_SRC
 14

	)

659 
	#BM_ANADIG_PLL_528_BYPASS_CLK_SRC
 0x0000C000

	)

660 
	#BF_ANADIG_PLL_528_BYPASS_CLK_SRC
(
v
) \

661 (((
v
ш<< 14ш& 
BM_ANADIG_PLL_528_BYPASS_CLK_SRC
)

	)

662 
	#BV_ANADIG_PLL_528_BYPASS_CLK_SRC__OSC_24M
 0x0

	)

663 
	#BV_ANADIG_PLL_528_BYPASS_CLK_SRC__ANACLK_1
 0x1

	)

664 
	#BV_ANADIG_PLL_528_BYPASS_CLK_SRC__ANACLK_2
 0x2

	)

665 
	#BV_ANADIG_PLL_528_BYPASS_CLK_SRC__XOR
 0x3

	)

666 
	#BM_ANADIG_PLL_528_ENABLE
 0x00002000

	)

667 
	#BM_ANADIG_PLL_528_POWERDOWN
 0x00001000

	)

668 
	#BM_ANADIG_PLL_528_HOLD_RING_OFF
 0x00000800

	)

669 
	#BM_ANADIG_PLL_528_DOUBLE_CP
 0x00000400

	)

670 
	#BM_ANADIG_PLL_528_HALF_CP
 0x00000200

	)

671 
	#BM_ANADIG_PLL_528_DOUBLE_LF
 0x00000100

	)

672 
	#BM_ANADIG_PLL_528_HALF_LF
 0x00000080

	)

673 
	#BP_ANADIG_PLL_528_RSVD0
 1

	)

674 
	#BM_ANADIG_PLL_528_RSVD0
 0x0000007E

	)

675 
	#BF_ANADIG_PLL_528_RSVD0
(
v
) \

676 (((
v
ш<< 1ш& 
BM_ANADIG_PLL_528_RSVD0
)

	)

677 
	#BM_ANADIG_PLL_528_DIV_SELECT
 0x00000001

	)

679 
	#BP_ANADIG_PLL_528_SS_STOP
 16

	)

680 
	#BM_ANADIG_PLL_528_SS_STOP
 0xFFFF0000

	)

681 
	#BF_ANADIG_PLL_528_SS_STOP
(
v
) \

682 (((
v
ш<< 16ш& 
BM_ANADIG_PLL_528_SS_STOP
)

	)

683 
	#BM_ANADIG_PLL_528_SS_ENABLE
 0x00008000

	)

684 
	#BP_ANADIG_PLL_528_SS_STEP
 0

	)

685 
	#BM_ANADIG_PLL_528_SS_STEP
 0x00007FFF

	)

686 
	#BF_ANADIG_PLL_528_SS_STEP
(
v
) \

687 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_528_SS_STEP
)

	)

689 
	#BP_ANADIG_PLL_528_NUM_RSVD0
 30

	)

690 
	#BM_ANADIG_PLL_528_NUM_RSVD0
 0xC0000000

	)

691 
	#BF_ANADIG_PLL_528_NUM_RSVD0
(
v
) \

692 (((
v
ш<< 30ш& 
BM_ANADIG_PLL_528_NUM_RSVD0
)

	)

693 
	#BP_ANADIG_PLL_528_NUM_A
 0

	)

694 
	#BM_ANADIG_PLL_528_NUM_A
 0x3FFFFFFF

	)

695 
	#BF_ANADIG_PLL_528_NUM_A
(
v
) \

696 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_528_NUM_A
)

	)

698 
	#BP_ANADIG_PLL_528_DENOM_RSVD0
 30

	)

699 
	#BM_ANADIG_PLL_528_DENOM_RSVD0
 0xC0000000

	)

700 
	#BF_ANADIG_PLL_528_DENOM_RSVD0
(
v
) \

701 (((
v
ш<< 30ш& 
BM_ANADIG_PLL_528_DENOM_RSVD0
)

	)

702 
	#BP_ANADIG_PLL_528_DENOM_B
 0

	)

703 
	#BM_ANADIG_PLL_528_DENOM_B
 0x3FFFFFFF

	)

704 
	#BF_ANADIG_PLL_528_DENOM_B
(
v
) \

705 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_528_DENOM_B
)

	)

707 
	#BM_ANADIG_PLL_AUDIO_LOCK
 0x80000000

	)

708 
	#BP_ANADIG_PLL_AUDIO_RSVD0
 22

	)

709 
	#BM_ANADIG_PLL_AUDIO_RSVD0
 0x7FC00000

	)

710 
	#BF_ANADIG_PLL_AUDIO_RSVD0
(
v
) \

711 (((
v
ш<< 22ш& 
BM_ANADIG_PLL_AUDIO_RSVD0
)

	)

712 
	#BM_ANADIG_PLL_AUDIO_SSC_EN
 0x00200000

	)

713 
	#BP_ANADIG_PLL_AUDIO_TEST_DIV_SELECT
 19

	)

714 
	#BM_ANADIG_PLL_AUDIO_TEST_DIV_SELECT
 0x00180000

	)

715 
	#BF_ANADIG_PLL_AUDIO_TEST_DIV_SELECT
(
v
) \

716 (((
v
ш<< 19ш& 
BM_ANADIG_PLL_AUDIO_TEST_DIV_SELECT
)

	)

717 
	#BM_ANADIG_PLL_AUDIO_PFD_OFFSET_EN
 0x00040000

	)

718 
	#BM_ANADIG_PLL_AUDIO_DITHER_ENABLE
 0x00020000

	)

719 
	#BM_ANADIG_PLL_AUDIO_BYPASS
 0x00010000

	)

720 
	#BP_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC
 14

	)

721 
	#BM_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC
 0x0000C000

	)

722 
	#BF_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC
(
v
) \

723 (((
v
ш<< 14ш& 
BM_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC
)

	)

724 
	#BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__OSC_24M
 0x0

	)

725 
	#BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__ANACLK_1
 0x1

	)

726 
	#BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__ANACLK_2
 0x2

	)

727 
	#BV_ANADIG_PLL_AUDIO_BYPASS_CLK_SRC__XOR
 0x3

	)

728 
	#BM_ANADIG_PLL_AUDIO_ENABLE
 0x00002000

	)

729 
	#BM_ANADIG_PLL_AUDIO_POWERDOWN
 0x00001000

	)

730 
	#BM_ANADIG_PLL_AUDIO_HOLD_RING_OFF
 0x00000800

	)

731 
	#BM_ANADIG_PLL_AUDIO_DOUBLE_CP
 0x00000400

	)

732 
	#BM_ANADIG_PLL_AUDIO_HALF_CP
 0x00000200

	)

733 
	#BM_ANADIG_PLL_AUDIO_DOUBLE_LF
 0x00000100

	)

734 
	#BM_ANADIG_PLL_AUDIO_HALF_LF
 0x00000080

	)

735 
	#BP_ANADIG_PLL_AUDIO_DIV_SELECT
 0

	)

736 
	#BM_ANADIG_PLL_AUDIO_DIV_SELECT
 0x0000007F

	)

737 
	#BF_ANADIG_PLL_AUDIO_DIV_SELECT
(
v
) \

738 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_AUDIO_DIV_SELECT
)

	)

740 
	#BP_ANADIG_PLL_AUDIO_NUM_RSVD0
 30

	)

741 
	#BM_ANADIG_PLL_AUDIO_NUM_RSVD0
 0xC0000000

	)

742 
	#BF_ANADIG_PLL_AUDIO_NUM_RSVD0
(
v
) \

743 (((
v
ш<< 30ш& 
BM_ANADIG_PLL_AUDIO_NUM_RSVD0
)

	)

744 
	#BP_ANADIG_PLL_AUDIO_NUM_A
 0

	)

745 
	#BM_ANADIG_PLL_AUDIO_NUM_A
 0x3FFFFFFF

	)

746 
	#BF_ANADIG_PLL_AUDIO_NUM_A
(
v
) \

747 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_AUDIO_NUM_A
)

	)

749 
	#BP_ANADIG_PLL_AUDIO_DENOM_RSVD0
 30

	)

750 
	#BM_ANADIG_PLL_AUDIO_DENOM_RSVD0
 0xC0000000

	)

751 
	#BF_ANADIG_PLL_AUDIO_DENOM_RSVD0
(
v
) \

752 (((
v
ш<< 30ш& 
BM_ANADIG_PLL_AUDIO_DENOM_RSVD0
)

	)

753 
	#BP_ANADIG_PLL_AUDIO_DENOM_B
 0

	)

754 
	#BM_ANADIG_PLL_AUDIO_DENOM_B
 0x3FFFFFFF

	)

755 
	#BF_ANADIG_PLL_AUDIO_DENOM_B
(
v
) \

756 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_AUDIO_DENOM_B
)

	)

758 
	#BM_ANADIG_PLL_VIDEO_LOCK
 0x80000000

	)

759 
	#BP_ANADIG_PLL_VIDEO_RSVD0
 22

	)

760 
	#BM_ANADIG_PLL_VIDEO_RSVD0
 0x7FC00000

	)

761 
	#BF_ANADIG_PLL_VIDEO_RSVD0
(
v
) \

762 (((
v
ш<< 22ш& 
BM_ANADIG_PLL_VIDEO_RSVD0
)

	)

763 
	#BM_ANADIG_PLL_VIDEO_SSC_EN
 0x00200000

	)

764 
	#BP_ANADIG_PLL_VIDEO_TEST_DIV_SELECT
 19

	)

765 
	#BM_ANADIG_PLL_VIDEO_TEST_DIV_SELECT
 0x00180000

	)

766 
	#BF_ANADIG_PLL_VIDEO_TEST_DIV_SELECT
(
v
) \

767 (((
v
ш<< 19ш& 
BM_ANADIG_PLL_VIDEO_TEST_DIV_SELECT
)

	)

768 
	#BM_ANADIG_PLL_VIDEO_PFD_OFFSET_EN
 0x00040000

	)

769 
	#BM_ANADIG_PLL_VIDEO_DITHER_ENABLE
 0x00020000

	)

770 
	#BM_ANADIG_PLL_VIDEO_BYPASS
 0x00010000

	)

771 
	#BP_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC
 14

	)

772 
	#BM_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC
 0x0000C000

	)

773 
	#BF_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC
(
v
) \

774 (((
v
ш<< 14ш& 
BM_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC
)

	)

775 
	#BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__OSC_24M
 0x0

	)

776 
	#BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__ANACLK_1
 0x1

	)

777 
	#BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__ANACLK_2
 0x2

	)

778 
	#BV_ANADIG_PLL_VIDEO_BYPASS_CLK_SRC__XOR
 0x3

	)

779 
	#BM_ANADIG_PLL_VIDEO_ENABLE
 0x00002000

	)

780 
	#BM_ANADIG_PLL_VIDEO_POWERDOWN
 0x00001000

	)

781 
	#BM_ANADIG_PLL_VIDEO_HOLD_RING_OFF
 0x00000800

	)

782 
	#BM_ANADIG_PLL_VIDEO_DOUBLE_CP
 0x00000400

	)

783 
	#BM_ANADIG_PLL_VIDEO_HALF_CP
 0x00000200

	)

784 
	#BM_ANADIG_PLL_VIDEO_DOUBLE_LF
 0x00000100

	)

785 
	#BM_ANADIG_PLL_VIDEO_HALF_LF
 0x00000080

	)

786 
	#BP_ANADIG_PLL_VIDEO_DIV_SELECT
 0

	)

787 
	#BM_ANADIG_PLL_VIDEO_DIV_SELECT
 0x0000007F

	)

788 
	#BF_ANADIG_PLL_VIDEO_DIV_SELECT
(
v
) \

789 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_VIDEO_DIV_SELECT
)

	)

791 
	#BP_ANADIG_PLL_VIDEO_NUM_RSVD0
 30

	)

792 
	#BM_ANADIG_PLL_VIDEO_NUM_RSVD0
 0xC0000000

	)

793 
	#BF_ANADIG_PLL_VIDEO_NUM_RSVD0
(
v
) \

794 (((
v
ш<< 30ш& 
BM_ANADIG_PLL_VIDEO_NUM_RSVD0
)

	)

795 
	#BP_ANADIG_PLL_VIDEO_NUM_A
 0

	)

796 
	#BM_ANADIG_PLL_VIDEO_NUM_A
 0x3FFFFFFF

	)

797 
	#BF_ANADIG_PLL_VIDEO_NUM_A
(
v
) \

798 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_VIDEO_NUM_A
)

	)

800 
	#BP_ANADIG_PLL_VIDEO_DENOM_RSVD0
 30

	)

801 
	#BM_ANADIG_PLL_VIDEO_DENOM_RSVD0
 0xC0000000

	)

802 
	#BF_ANADIG_PLL_VIDEO_DENOM_RSVD0
(
v
) \

803 (((
v
ш<< 30ш& 
BM_ANADIG_PLL_VIDEO_DENOM_RSVD0
)

	)

804 
	#BP_ANADIG_PLL_VIDEO_DENOM_B
 0

	)

805 
	#BM_ANADIG_PLL_VIDEO_DENOM_B
 0x3FFFFFFF

	)

806 
	#BF_ANADIG_PLL_VIDEO_DENOM_B
(
v
) \

807 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_VIDEO_DENOM_B
)

	)

809 
	#BM_ANADIG_PLL_ENET_LOCK
 0x80000000

	)

810 
	#BP_ANADIG_PLL_ENET_RSVD1
 21

	)

811 
	#BM_ANADIG_PLL_ENET_RSVD1
 0x7FE00000

	)

812 
	#BF_ANADIG_PLL_ENET_RSVD1
(
v
) \

813 (((
v
ш<< 21ш& 
BM_ANADIG_PLL_ENET_RSVD1
)

	)

814 
	#BM_ANADIG_PLL_ENET_ENABLE_SATA
 0x00100000

	)

815 
	#BM_ANADIG_PLL_ENET_ENABLE_PCIE
 0x00080000

	)

816 
	#BM_ANADIG_PLL_ENET_PFD_OFFSET_EN
 0x00040000

	)

817 
	#BM_ANADIG_PLL_ENET_DITHER_ENABLE
 0x00020000

	)

818 
	#BM_ANADIG_PLL_ENET_BYPASS
 0x00010000

	)

819 
	#BP_ANADIG_PLL_ENET_BYPASS_CLK_SRC
 14

	)

820 
	#BM_ANADIG_PLL_ENET_BYPASS_CLK_SRC
 0x0000C000

	)

821 
	#BF_ANADIG_PLL_ENET_BYPASS_CLK_SRC
(
v
) \

822 (((
v
ш<< 14ш& 
BM_ANADIG_PLL_ENET_BYPASS_CLK_SRC
)

	)

823 
	#BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__OSC_24M
 0x0

	)

824 
	#BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__ANACLK_1
 0x1

	)

825 
	#BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__ANACLK_2
 0x2

	)

826 
	#BV_ANADIG_PLL_ENET_BYPASS_CLK_SRC__XOR
 0x3

	)

827 
	#BM_ANADIG_PLL_ENET_ENABLE
 0x00002000

	)

828 
	#BM_ANADIG_PLL_ENET_POWERDOWN
 0x00001000

	)

829 
	#BM_ANADIG_PLL_ENET_HOLD_RING_OFF
 0x00000800

	)

830 
	#BM_ANADIG_PLL_ENET_DOUBLE_CP
 0x00000400

	)

831 
	#BM_ANADIG_PLL_ENET_HALF_CP
 0x00000200

	)

832 
	#BM_ANADIG_PLL_ENET_DOUBLE_LF
 0x00000100

	)

833 
	#BM_ANADIG_PLL_ENET_HALF_LF
 0x00000080

	)

834 
	#BP_ANADIG_PLL_ENET_RSVD0
 2

	)

835 
	#BM_ANADIG_PLL_ENET_RSVD0
 0x0000007C

	)

836 
	#BF_ANADIG_PLL_ENET_RSVD0
(
v
) \

837 (((
v
ш<< 2ш& 
BM_ANADIG_PLL_ENET_RSVD0
)

	)

838 
	#BP_ANADIG_PLL_ENET_DIV_SELECT
 0

	)

839 
	#BM_ANADIG_PLL_ENET_DIV_SELECT
 0x00000003

	)

840 
	#BF_ANADIG_PLL_ENET_DIV_SELECT
(
v
) \

841 (((
v
ш<< 0ш& 
BM_ANADIG_PLL_ENET_DIV_SELECT
)

	)

843 
	#BM_ANADIG_PFD_480_PFD3_CLKGATE
 0x80000000

	)

844 
	#BM_ANADIG_PFD_480_PFD3_STABLE
 0x40000000

	)

845 
	#BP_ANADIG_PFD_480_PFD3_FRAC
 24

	)

846 
	#BM_ANADIG_PFD_480_PFD3_FRAC
 0x3F000000

	)

847 
	#BF_ANADIG_PFD_480_PFD3_FRAC
(
v
) \

848 (((
v
ш<< 24ш& 
BM_ANADIG_PFD_480_PFD3_FRAC
)

	)

849 
	#BM_ANADIG_PFD_480_PFD2_CLKGATE
 0x00800000

	)

850 
	#BM_ANADIG_PFD_480_PFD2_STABLE
 0x00400000

	)

851 
	#BP_ANADIG_PFD_480_PFD2_FRAC
 16

	)

852 
	#BM_ANADIG_PFD_480_PFD2_FRAC
 0x003F0000

	)

853 
	#BF_ANADIG_PFD_480_PFD2_FRAC
(
v
) \

854 (((
v
ш<< 16ш& 
BM_ANADIG_PFD_480_PFD2_FRAC
)

	)

855 
	#BM_ANADIG_PFD_480_PFD1_CLKGATE
 0x00008000

	)

856 
	#BM_ANADIG_PFD_480_PFD1_STABLE
 0x00004000

	)

857 
	#BP_ANADIG_PFD_480_PFD1_FRAC
 8

	)

858 
	#BM_ANADIG_PFD_480_PFD1_FRAC
 0x00003F00

	)

859 
	#BF_ANADIG_PFD_480_PFD1_FRAC
(
v
) \

860 (((
v
ш<< 8ш& 
BM_ANADIG_PFD_480_PFD1_FRAC
)

	)

861 
	#BM_ANADIG_PFD_480_PFD0_CLKGATE
 0x00000080

	)

862 
	#BM_ANADIG_PFD_480_PFD0_STABLE
 0x00000040

	)

863 
	#BP_ANADIG_PFD_480_PFD0_FRAC
 0

	)

864 
	#BM_ANADIG_PFD_480_PFD0_FRAC
 0x0000003F

	)

865 
	#BF_ANADIG_PFD_480_PFD0_FRAC
(
v
) \

866 (((
v
ш<< 0ш& 
BM_ANADIG_PFD_480_PFD0_FRAC
)

	)

868 
	#BM_ANADIG_PFD_528_PFD3_CLKGATE
 0x80000000

	)

869 
	#BM_ANADIG_PFD_528_PFD3_STABLE
 0x40000000

	)

870 
	#BP_ANADIG_PFD_528_PFD3_FRAC
 24

	)

871 
	#BM_ANADIG_PFD_528_PFD3_FRAC
 0x3F000000

	)

872 
	#BF_ANADIG_PFD_528_PFD3_FRAC
(
v
) \

873 (((
v
ш<< 24ш& 
BM_ANADIG_PFD_528_PFD3_FRAC
)

	)

874 
	#BM_ANADIG_PFD_528_PFD2_CLKGATE
 0x00800000

	)

875 
	#BM_ANADIG_PFD_528_PFD2_STABLE
 0x00400000

	)

876 
	#BP_ANADIG_PFD_528_PFD2_FRAC
 16

	)

877 
	#BM_ANADIG_PFD_528_PFD2_FRAC
 0x003F0000

	)

878 
	#BF_ANADIG_PFD_528_PFD2_FRAC
(
v
) \

879 (((
v
ш<< 16ш& 
BM_ANADIG_PFD_528_PFD2_FRAC
)

	)

880 
	#BM_ANADIG_PFD_528_PFD1_CLKGATE
 0x00008000

	)

881 
	#BM_ANADIG_PFD_528_PFD1_STABLE
 0x00004000

	)

882 
	#BP_ANADIG_PFD_528_PFD1_FRAC
 8

	)

883 
	#BM_ANADIG_PFD_528_PFD1_FRAC
 0x00003F00

	)

884 
	#BF_ANADIG_PFD_528_PFD1_FRAC
(
v
) \

885 (((
v
ш<< 8ш& 
BM_ANADIG_PFD_528_PFD1_FRAC
)

	)

886 
	#BM_ANADIG_PFD_528_PFD0_CLKGATE
 0x00000080

	)

887 
	#BM_ANADIG_PFD_528_PFD0_STABLE
 0x00000040

	)

888 
	#BP_ANADIG_PFD_528_PFD0_FRAC
 0

	)

889 
	#BM_ANADIG_PFD_528_PFD0_FRAC
 0x0000003F

	)

890 
	#BF_ANADIG_PFD_528_PFD0_FRAC
(
v
) \

891 (((
v
ш<< 0ш& 
BM_ANADIG_PFD_528_PFD0_FRAC
)

	)

893 
	#PLL2_PFD0_FREQ
 352000000

	)

894 
	#PLL2_PFD1_FREQ
 594000000

	)

895 
	#PLL2_PFD2_FREQ
 396000000

	)

896 
	#PLL2_PFD2_DIV_FREQ
 200000000

	)

897 
	#PLL3_PFD0_FREQ
 720000000

	)

898 
	#PLL3_PFD1_FREQ
 540000000

	)

899 
	#PLL3_PFD2_FREQ
 508200000

	)

900 
	#PLL3_PFD3_FREQ
 454700000

	)

901 
	#PLL3_80M
 80000000

	)

902 
	#PLL3_60M
 60000000

	)

	@debug.c

10 
	~"debug.h
"

11 
	~"byoos_c┌fig.h
"

12 
	~"гrЯl.h
"

14 
	gsyбem_d╦vЦ
;

16 
	$debugp
(
d╦vЦ
, c┌б *
бr
)

18 
i
;

20 if(
d╦vЦ
 >Ё
syбem_d╦vЦ
) {

21 
i
 = 0; (Ш< 
CFG_DEBUG_CHAR_MAX
ш&& 
бr
[i]; i++) {

22 
	`гrЯl_putc
(
бr
[
i
]);

25 
	}
}

	@debug.h

10 #iтdeр
BYOOS_DEBUG_H


11 
	#BYOOS_DEBUG_H


	)

14 
	mINFO_MSG
,

15 
	mWARN_MSG
,

16 
	mERROR_MSG


19 
debugp
(
d╦vЦ
, c┌б *
бr
);

20 
debug_sys_ЪЩ
();

	@errno.h

9 #iтdeр
_GENERIC_ERRNO_H


10 
	#_GENERIC_ERRNO_H


	)

12 
	#EPERM
 1

	)

13 
	#ENOENT
 2

	)

14 
	#ESRCH
 3

	)

15 
	#EINTR
 4

	)

16 
	#EIO
 5

	)

17 
	#ENXIO
 6

	)

18 
	#E2BIG
 7

	)

19 
	#ENOEXEC
 8

	)

20 
	#EBADF
 9

	)

21 
	#ECHILD
 10

	)

22 
	#EAGAIN
 11

	)

23 
	#ENOMEM
 12

	)

24 
	#EACCES
 13

	)

25 
	#EFAULT
 14

	)

26 
	#ENOTBLK
 15

	)

27 
	#EBUSY
 16

	)

28 
	#EEXIST
 17

	)

29 
	#EXDEV
 18

	)

30 
	#ENODEV
 19

	)

31 
	#ENOTDIR
 20

	)

32 
	#EISDIR
 21

	)

33 
	#EINVAL
 22

	)

34 
	#ENFILE
 23

	)

35 
	#EMFILE
 24

	)

36 
	#ENOTTY
 25

	)

37 
	#ETXTBSY
 26

	)

38 
	#EFBIG
 27

	)

39 
	#ENOSPC
 28

	)

40 
	#ESPIPE
 29

	)

41 
	#EROFS
 30

	)

42 
	#EMLINK
 31

	)

43 
	#EPIPE
 32

	)

44 
	#EDOM
 33

	)

45 
	#ERANGE
 34

	)

46 
	#EDEADLK
 35

	)

47 
	#ENAMETOOLONG
 36

	)

48 
	#ENOLCK
 37

	)

49 
	#ENOSYS
 38

	)

50 
	#ENOTEMPTY
 39

	)

51 
	#ELOOP
 40

	)

52 
	#EWOULDBLOCK
 
EAGAIN


	)

53 
	#ENOMSG
 42

	)

54 
	#EIDRM
 43

	)

55 
	#ECHRNG
 44

	)

56 
	#EL2NSYNC
 45

	)

57 
	#EL3HLT
 46

	)

58 
	#EL3RST
 47

	)

59 
	#ELNRNG
 48

	)

60 
	#EUNATCH
 49

	)

61 
	#ENOCSI
 50

	)

62 
	#EL2HLT
 51

	)

63 
	#EBADE
 52

	)

64 
	#EBADR
 53

	)

65 
	#EXFULL
 54

	)

66 
	#ENOANO
 55

	)

67 
	#EBADRQC
 56

	)

68 
	#EBADSLT
 57

	)

70 
	#EDEADLOCK
 
EDEADLK


	)

72 
	#EBFONT
 59

	)

73 
	#ENOSTR
 60

	)

74 
	#ENODATA
 61

	)

75 
	#ETIME
 62

	)

76 
	#ENOSR
 63

	)

77 
	#ENONET
 64

	)

78 
	#ENOPKG
 65

	)

79 
	#EREMOTE
 66

	)

80 
	#ENOLINK
 67

	)

81 
	#EADV
 68

	)

82 
	#ESRMNT
 69

	)

83 
	#ECOMM
 70

	)

84 
	#EPROTO
 71

	)

85 
	#EMULTIHOP
 72

	)

86 
	#EDOTDOT
 73

	)

87 
	#EBADMSG
 74

	)

88 
	#EOVERFLOW
 75

	)

89 
	#ENOTUNIQ
 76

	)

90 
	#EBADFD
 77

	)

91 
	#EREMCHG
 78

	)

92 
	#ELIBACC
 79

	)

93 
	#ELIBBAD
 80

	)

94 
	#ELIBSCN
 81

	)

95 
	#ELIBMAX
 82

	)

96 
	#ELIBEXEC
 83

	)

97 
	#EILSEQ
 84

	)

98 
	#ERESTART
 85

	)

99 
	#ESTRPIPE
 86

	)

100 
	#EUSERS
 87

	)

101 
	#ENOTSOCK
 88

	)

102 
	#EDESTADDRREQ
 89

	)

103 
	#EMSGSIZE
 90

	)

104 
	#EPROTOTYPE
 91

	)

105 
	#ENOPROTOOPT
 92

	)

106 
	#EPROTONOSUPPORT
 93

	)

107 
	#ESOCKTNOSUPPORT
 94

	)

108 
	#EOPNOTSUPP
 95

	)

109 
	#EPFNOSUPPORT
 96

	)

110 
	#EAFNOSUPPORT
 97

	)

111 
	#EADDRINUSE
 98

	)

112 
	#EADDRNOTAVAIL
 99

	)

113 
	#ENETDOWN
 100

	)

114 
	#ENETUNREACH
 101

	)

115 
	#ENETRESET
 102

	)

116 
	#ECONNABORTED
 103

	)

117 
	#ECONNRESET
 104

	)

118 
	#ENOBUFS
 105

	)

119 
	#EISCONN
 106

	)

120 
	#ENOTCONN
 107

	)

121 
	#ESHUTDOWN
 108

	)

122 
	#ETOOMANYREFS
 109

	)

123 
	#ETIMEDOUT
 110

	)

124 
	#ECONNREFUSED
 111

	)

125 
	#EHOSTDOWN
 112

	)

126 
	#EHOSTUNREACH
 113

	)

127 
	#EALREADY
 114

	)

128 
	#EINPROGRESS
 115

	)

129 
	#ESTALE
 116

	)

130 
	#EUCLEAN
 117

	)

131 
	#ENOTNAM
 118

	)

132 
	#ENAVAIL
 119

	)

133 
	#EISNAM
 120

	)

134 
	#EREMOTEIO
 121

	)

135 
	#EDQUOT
 122

	)

136 
	#ENOMEDIUM
 123

	)

137 
	#EMEDIUMTYPE
 124

	)

	@imx6x.c

10 
	~"imx6x.h
"

11 
	~"№m_╗gs.h
"

13 
u32
 
	$gС_uмt_baг
(
num
)

15 
u32
 
addr
;

17 
num
) {

19 
addr
 = 
UART1_BASE
;

22 
addr
 = 
UART2_BASE
;

25 
addr
 = 
UART3_BASE
;

28 
addr
 = 
UART4_BASE
;

31 
addr
 = 
UART5_BASE
;

34 
addr
 = 0;

38  
addr
;

39 
	}
}

42 
mxc_ccm_╗g
 *
	gimx_ccm
 = (mxc_ccm_╗g *)
CCM_BASE_ADDR
;

43 
u32
 
	$gС_uмt_■k
()

45 
u32
 
╗g
, 
uмt_podf
;

46 
u32
 
фeq
 = 
PLL3_80M
;

48 
╗g
 = 
	`__┐w_╗adl
(&
imx_ccm
->
cscdr1
);

49 #ifdeр
CONFIG_MX6SL


50 iр(
╗g
 & 
MXC_CCM_CSCDR1_UART_CLK_SEL
)

51 
фeq
 = 
MXC_HCLK
;

53 
╗g
 &Ё
MXC_CCM_CSCDR1_UART_CLK_PODF_MASK
;

54 
uмt_podf
 = 
╗g
 >> 
MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET
;

56  
фeq
 / (
uмt_podf
 + 1);

57 
	}
}

60 
	$soc_гtup
()

64 
	}
}

	@imx6x.h

10 #iтdeр
BYOOS_IMX6QDQ_H


11 
	#BYOOS_IMX6QDQ_H


	)

13 
	~"ty│s.h
"

16 
	#SRC_BASE
 0x020D8000

	)

17 
	#SRC_GPR1
 (
SRC_BASE
+0x20)

	)

19 
	#ENTRY_VECTOR_CORE
(
x
ш(
SRC_GPR1
 + (4 * 2 * x))

	)

20 
	#ENTRY_ARGREG_CORE
(
x
ш(
	`ENTRY_VECT_CORE
(xш+ 4)

	)

23 
	#AIPS1_ARB_BASE_ADDR
 0x02000000

	)

24 
	#AIPS2_ARB_BASE_ADDR
 0x02100000

	)

26 
	#CCM_BASE_ADDR
 (
AIPS1_ARB_BASE_ADDR
 + 0x44000)

	)

29 
	#UART1_BASE
 (
AIPS1_ARB_BASE_ADDR
 + 0x20000)

	)

30 
	#UART2_BASE
 (
AIPS2_ARB_BASE_ADDR
 + 0x68000)

	)

31 
	#UART3_BASE
 (
AIPS2_ARB_BASE_ADDR
 + 0x6C000)

	)

32 
	#UART4_BASE
 (
AIPS2_ARB_BASE_ADDR
 + 0x70000)

	)

33 
	#UART5_BASE
 (
AIPS2_ARB_BASE_ADDR
 + 0x74000)

	)

35 
	#UART1_URXD
 (
AIPS1_ARB_BASE_ADDR
 + 0x20000)

	)

36 
	#UART1_UTXD
 (
AIPS1_ARB_BASE_ADDR
 + 0x20040)

	)

37 
	#UART2_URXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xE8000)

	)

38 
	#UART2_UTXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xE8040)

	)

39 
	#UART3_URXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xEC000)

	)

40 
	#UART3_UTXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xEC040)

	)

41 
	#UART4_URXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xF0000)

	)

42 
	#UART4_UTXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xF0040)

	)

43 
	#UART5_URXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xF4000)

	)

44 
	#UART5_UTXD
 (
AIPS2_ARB_BASE_ADDR
 + 0xF4040)

	)

47 
	#__┐w_╗adl
(
a
ш(*(v▐йЮР*)╫))

	)

51 
	#WATCHDOG_RESET
(ш1 =Ё1

	)

53 
u32
 
gС_uмt_baг
(
num
);

54 
u32
 
gС_uмt_■k
();

56 
soc_гtup
();

	@serial.c

11 
	~"Ф║o.h
"

12 
	~"byoos_c┌fig.h
"

13 
	~"byoos.h
"

14 
	~"гrЯl.h
"

16 
	#__REG
(
x
ш(*((v▐йЮР
u32
 *)(x)))

	)

18 #iтdeр
CONFIG_MXC_UART_BASE


22 
	#UART_PHYS
 
CONFIG_MXC_UART_BASE


	)

25 
	#URXD
 0x0

	)

26 
	#UTXD
 0x40

	)

27 
	#UCR1
 0x80

	)

28 
	#UCR2
 0x84

	)

29 
	#UCR3
 0x88

	)

30 
	#UCR4
 0x8°

	)

31 
	#UFCR
 0x90

	)

32 
	#USR1
 0x94

	)

33 
	#USR2
 0x98

	)

34 
	#UESC
 0x9°

	)

35 
	#UTIM
 0xa0

	)

36 
	#UBIR
 0xa4

	)

37 
	#UBMR
 0xa8

	)

38 
	#UBRC
 0xa°

	)

39 
	#UTS
 0xb4

	)

42 
	#URXD_CHARRDY
 (1<<15)

	)

43 
	#URXD_ERR
 (1<<14)

	)

44 
	#URXD_OVRRUN
 (1<<13)

	)

45 
	#URXD_FRMERR
 (1<<12)

	)

46 
	#URXD_BRK
 (1<<11)

	)

47 
	#URXD_PRERR
 (1<<10)

	)

48 
	#URXD_RX_DATA
 (0xFF)

	)

49 
	#UCR1_ADEN
 (1<<15ш

	)

50 
	#UCR1_ADBR
 (1<<14ш

	)

51 
	#UCR1_TRDYEN
 (1<<13ш

	)

52 
	#UCR1_IDEN
 (1<<12ш

	)

53 
	#UCR1_RRDYEN
 (1<<9ш

	)

54 
	#UCR1_RDMAEN
 (1<<8ш

	)

55 
	#UCR1_IREN
 (1<<7ш

	)

56 
	#UCR1_TXMPTYEN
 (1<<6ш

	)

57 
	#UCR1_RTSDEN
 (1<<5ш

	)

58 
	#UCR1_SNDBRK
 (1<<4ш

	)

59 
	#UCR1_TDMAEN
 (1<<3ш

	)

60 
	#UCR1_UARTCLKEN
 (1<<2ш

	)

61 
	#UCR1_DOZE
 (1<<1ш

	)

62 
	#UCR1_UARTEN
 (1<<0ш

	)

63 
	#UCR2_ESCI
 (1<<15ш

	)

64 
	#UCR2_IRTS
 (1<<14ш

	)

65 
	#UCR2_CTSC
 (1<<13ш

	)

66 
	#UCR2_CTS
 (1<<12ш

	)

67 
	#UCR2_ESCEN
 (1<<11ш

	)

68 
	#UCR2_PREN
 (1<<8ш

	)

69 
	#UCR2_PROE
 (1<<7ш

	)

70 
	#UCR2_STPB
 (1<<6ш

	)

71 
	#UCR2_WS
 (1<<5ш

	)

72 
	#UCR2_RTSEN
 (1<<4ш

	)

73 
	#UCR2_TXEN
 (1<<2ш

	)

74 
	#UCR2_RXEN
 (1<<1ш

	)

75 
	#UCR2_SRST
 (1<<0ш

	)

76 
	#UCR3_DTREN
 (1<<13ш

	)

77 
	#UCR3_PARERREN
 (1<<12ш

	)

78 
	#UCR3_FRAERREN
 (1<<11ш

	)

79 
	#UCR3_DSR
 (1<<10ш

	)

80 
	#UCR3_DCD
 (1<<9ш

	)

81 
	#UCR3_RI
 (1<<8ш

	)

82 
	#UCR3_TIMEOUTEN
 (1<<7ш

	)

83 
	#UCR3_RXDSEN
 (1<<6ш

	)

84 
	#UCR3_AIRINTEN
 (1<<5ш

	)

85 
	#UCR3_AWAKEN
 (1<<4ш

	)

86 
	#UCR3_REF25
 (1<<3ш

	)

87 
	#UCR3_REF30
 (1<<2ш

	)

88 
	#UCR3_INVT
 (1<<1ш

	)

89 
	#UCR3_BPEN
 (1<<0ш

	)

90 
	#UCR4_CTSTL_32
 (32<<10ш

	)

91 
	#UCR4_INVR
 (1<<9ш

	)

92 
	#UCR4_ENIRI
 (1<<8ш

	)

93 
	#UCR4_WKEN
 (1<<7ш

	)

94 
	#UCR4_REF16
 (1<<6ш

	)

95 
	#UCR4_IRSC
 (1<<5ш

	)

96 
	#UCR4_TCEN
 (1<<3ш

	)

97 
	#UCR4_BKEN
 (1<<2ш

	)

98 
	#UCR4_OREN
 (1<<1ш

	)

99 
	#UCR4_DREN
 (1<<0ш

	)

100 
	#UFCR_RXTL_SHF
 0

	)

101 
	#UFCR_RFDIV
 (7<<7ш

	)

102 
	#UFCR_TXTL_SHF
 10

	)

103 
	#USR1_PARITYERR
 (1<<15ш

	)

104 
	#USR1_RTSS
 (1<<14ш

	)

105 
	#USR1_TRDY
 (1<<13ш

	)

106 
	#USR1_RTSD
 (1<<12ш

	)

107 
	#USR1_ESCF
 (1<<11ш

	)

108 
	#USR1_FRAMERR
 (1<<10ш

	)

109 
	#USR1_RRDY
 (1<<9ш

	)

110 
	#USR1_TIMEOUT
 (1<<7ш

	)

111 
	#USR1_RXDS
 (1<<6ш

	)

112 
	#USR1_AIRINT
 (1<<5ш

	)

113 
	#USR1_AWAKE
 (1<<4ш

	)

114 
	#USR2_ADET
 (1<<15ш

	)

115 
	#USR2_TXFE
 (1<<14ш

	)

116 
	#USR2_DTRF
 (1<<13ш

	)

117 
	#USR2_IDLE
 (1<<12ш

	)

118 
	#USR2_IRINT
 (1<<8ш

	)

119 
	#USR2_WAKE
 (1<<7ш

	)

120 
	#USR2_RTSF
 (1<<4ш

	)

121 
	#USR2_TXDC
 (1<<3ш

	)

122 
	#USR2_BRCD
 (1<<2ш

	)

123 
	#USR2_ORE
 (1<<1ш

	)

124 
	#USR2_RDR
 (1<<0ш

	)

125 
	#UTS_FRCPERR
 (1<<13ш

	)

126 
	#UTS_LOOP
 (1<<12ш

	)

127 
	#UTS_TXEMPTY
 (1<<6ш

	)

128 
	#UTS_RXEMPTY
 (1<<5ш

	)

129 
	#UTS_TXFULL
 (1<<4ш

	)

130 
	#UTS_RXFULL
 (1<<3ш

	)

131 
	#UTS_SOFTRST
 (1<<0ш

	)

134 
	$гrЯl_гtbrg
()

136 
u32
 
■k
 = 
	`gС_uмt_■k
();

138 
	`__REG
(
UART_PHYS
 + 
UFCR
) = 4 << 7;

139 
	`__REG
(
UART_PHYS
 + 
UBIR
) = 0xf;

140 
	`__REG
(
UART_PHYS
 + 
UBMR
шЁ
■k
 / (2 * 
CONFIG_BAUDRATE
);

142 
	}
}

144 
	$гrЯl_gСc
()

146 
	`__REG
(
UART_PHYS
 + 
UTS
ш& 
UTS_RXEMPTY
)

147 
	`WATCHDOG_RESET
();

148  (
	`__REG
(
UART_PHYS
 + 
URXD
ш& 
URXD_RX_DATA
);

149 
	}
}

151 
	$гrЯl_putc
(c┌б 
c
)

153 
	`__REG
(
UART_PHYS
 + 
UTXD
шЁ
c
;

156 !(
	`__REG
(
UART_PHYS
 + 
UTS
ш& 
UTS_TXEMPTY
))

157 
	`WATCHDOG_RESET
();

160 iр(
c
 == '\n')

161 
	`гrЯl_putc
 ('\r');

162 
	}
}

167 
	$гrЯl_tбc
()

170 iр(
	`__REG
(
UART_PHYS
 + 
UTS
ш& 
UTS_RXEMPTY
)

173 
	}
}

180 
	$гrЯl_ЪЩ
()

182 
	`__REG
(
UART_PHYS
 + 
UCR1
) = 0x0;

183 
	`__REG
(
UART_PHYS
 + 
UCR2
) = 0x0;

185 !(
	`__REG
(
UART_PHYS
 + 
UCR2
ш& 
UCR2_SRST
));

187 
	`__REG
(
UART_PHYS
 + 
UCR3
) = 0x0704;

188 
	`__REG
(
UART_PHYS
 + 
UCR4
) = 0x8000;

189 
	`__REG
(
UART_PHYS
 + 
UESC
) = 0x002b;

190 
	`__REG
(
UART_PHYS
 + 
UTIM
) = 0x0;

192 
	`__REG
(
UART_PHYS
 + 
UTS
) = 0x0;

194 
	`гrЯl_гtbrg
();

196 
	`__REG
(
UART_PHYS
 + 
UCR2
шЁ
UCR2_WS
 | 
UCR2_IRTS
 | 
UCR2_RXEN
 | 
UCR2_TXEN


197 | 
UCR2_SRST
;

199 
	`__REG
(
UART_PHYS
 + 
UCR1
шЁ
UCR1_UARTEN
;

202 
	}
}

205 
гrЯl_devi√
 
	gгrЯl_drv
 = {

206 .
╟me
 = "mxc_serial",

207 .
	gбмt
 = 
гrЯl_ЪЩ
,

208 .
	gб▌
 = 
NULL
,

209 .
	gгtbrg
 = 
гrЯl_гtbrg
,

210 .
	gputc
 = 
гrЯl_putc
,

211 .
	gputs
 = 
deчu╔_гrЯl_puts
,

212 .
	ggСc
 = 
гrЯl_gСc
,

213 .
	gtбc
 = 
гrЯl_tбc
,

216 
	$гrЯl_ЪЩЯlize
()

218 
	`гrЯl_╗giбФ
(&
гrЯl_drv
);

219 
	}
}

221 
__wЧk
 
гrЯl_devi√
 *
	$deчu╔_гrЯl_c┌s▐e
()

223  &
гrЯl_drv
;

224 
	}
}

	@serial.h

1 #iтdeр
__SERIAL_H__


2 
	#__SERIAL_H__


	)

4 
гrЯl_ЪЩ
();

5 
гrЯl_tбc
();

6 
гrЯl_putc
(c┌б 
c
);

7 
гrЯl_gСc
();

10 
	sгrЯl_devi√
 {

12 
	m╟me
[16];

14 (*
	mбмt
)();

15 (*
	mб▌
)();

16 (*
	mгtbrg
)();

17 (*
	mgСc
)();

18 (*
	mtбc
)();

19 (*
	mputc
)(c┌б 
	mc
);

20 (*
	mputs
)(c┌б *
	ms
);

21 #iр
CONFIG_POST
 & 
CONFIG_SYS_POST_UART


22 (*
	mlo▌
)();

24 
гrЯl_devi√
 *
	m├xt
;

27 
deчu╔_гrЯl_puts
(c┌б *
s
);

29 
гrЯl_devi√
 
гrЯl_smc_devi√
;

30 
гrЯl_devi√
 
гrЯl_scc_devi√
;

31 
гrЯl_devi√
 *
deчu╔_гrЯl_c┌s▐e
();

33 #if 
defЪed
(
CONFIG_405GP
) || \

34 
defЪed
(
CONFIG_405EP
ш|| defЪed(
CONFIG_405EZ
) || \

35 
defЪed
(
CONFIG_405EX
ш|| defЪed(
CONFIG_440
) || \

36 
defЪed
(
CONFIG_MB86R0x
ш|| defЪed(
CONFIG_MPC5xxx
) || \

37 
defЪed
(
CONFIG_MPC83xx
ш|| defЪed(
CONFIG_MPC85xx
) || \

38 
defЪed
(
CONFIG_MPC86xx
ш|| defЪed(
CONFIG_SYS_SC520
) || \

39 
defЪed
(
CONFIG_TEGRA
ш|| defЪed(
CONFIG_SYS_COREBOOT
) || \

40 
	$defЪed
(
CONFIG_MICROBLAZE
)

41 
гrЯl_devi√
 
гrЯl0_devi√
;

42 
гrЯl_devi√
 
гrЯl1_devi√
;

45 
гrЯl_devi√
 
eгrЯl1_devi√
;

46 
гrЯl_devi√
 
eгrЯl2_devi√
;

48 
	`гrЯl_╗giбФ
(
гrЯl_devi√
 *);

49 
	`гrЯl_ЪЩЯlize
();

50 
	`гrЯl_бdio_ЪЩ
();

51 
	`гrЯl_assign
(c┌б *
╟me
);

52 
	`гrЯl_╗ЪЩ_оl
();

55 #ifdeр
CONFIG_USB_TTY


57 
	`usbЙy_gСc
();

58 
	`usbЙy_putc
(c┌б 
c
);

59 
	`usbЙy_puts
(c┌б *
бr
);

60 
	`usbЙy_tбc
();

65 
	#usbЙy_gСc
(ш0

	)

66 
	#usbЙy_putc
(
a
)

	)

67 
	#usbЙy_puts
(
a
)

	)

68 
	#usbЙy_tбc
(ш0

	)

72 #iр
	`defЪed
(
CONFIG_MPC512X
)

73 
бdio_dev
 *
	`▌Т_p▄t
(
num
, 
baud┐Л
);

74 
	`■oг_p▄t
(
num
);

75 
	`wrЩe_p▄t
(
бdio_dev
 *
p▄t
, *
buf
);

76 
	`╗ad_p▄t
(
бdio_dev
 *
p▄t
, *
buf
, 
size
);

	@serial_delete.c

12 
	~"Ф║o.h
"

13 
	~"byoos_c┌fig.h
"

14 
	~"byoos.h
"

15 
	~"гrЯl.h
"

18 
гrЯl_devi√
 *
	gгrЯl_devi√s
;

19 
гrЯl_devi√
 *
	gгrЯl_cu╝Тt
;

23 c┌б 
	gbaud┐Л_Пb╦
[] = 
CONFIG_SYS_BAUDRATE_TABLE
;

33 
	$гrЯl_nu╬
()

35 
	}
}

43 
	$┌_baud┐Л
(c┌б *
╟me
, c┌б *
vоue
, 
Тv_▌
 
▌
,

44 
цags
)

46 
i
;

47 
baud┐Л
;

49 
▌
) {

50 
Тv_▌_№ЧЛ
:

51 
Тv_▌_ovФwrЩe
:

55 
baud┐Л
 = 
	`sim╢e_б╣oul
(
vоue
, 
NULL
, 10);

58 iр(
gd
->
baud┐Л
 == baudrate)

61 
i
 = 0; i < 
	`ARRAY_SIZE
(
baud┐Л_Пb╦
); ++i) {

62 iр(
baud┐Л
 =Ё
baud┐Л_Пb╦
[
i
])

65 iр(
i
 =Ё
	`ARRAY_SIZE
(
baud┐Л_Пb╦
)) {

66 iр((
цags
 & 
H_FORCE
) == 0)

67 
	`┤Ъtf
("## Baudrate %d bpsВot supported\n",

68 
baud┐Л
);

71 iр((
цags
 & 
H_INTERACTIVE
) != 0) {

72 
	`┤Ъtf
("## Switch baudrateБo %d"

73 " bpакdЕ╗sаENTER ...\n", 
baud┐Л
);

74 
	`udЦay
(50000);

77 
gd
->
baud┐Л
 = baudrate;

78 #iр
	`defЪed
(
CONFIG_PPC
ш|| defЪed(
CONFIG_MCF52x2
)

79 
gd
->
bd
->
bi_baud┐Л
 = 
baud┐Л
;

82 
	`гrЯl_гtbrg
();

84 
	`udЦay
(50000);

86 iр((
цags
 & 
H_INTERACTIVE
) != 0)

88 iр(
	`gСc
() == '\r')

93 
Тv_▌_dЦСe
:

94 
	`┤Ъtf
("## Baudrate mayВot be deleted\n");

99 
	}
}

100 
U_BOOT_ENV_CALLBACK
(
baud┐Л
, 
┌_baud┐Л
);

112 
	#гrЯl_ЪЩfunc
(
╟me
) \

113 
	`╟me
() \

114 
	`__йМibuЛ__
((
wЧk
, 
	`оЯs
("гrЯl_nu╬")));

	)

116 
гrЯl_ЪЩfunc
(
mpc8xx_гrЯl_ЪЩЯlize
);

117 
гrЯl_ЪЩfunc
(
ns16550_гrЯl_ЪЩЯlize
);

118 
гrЯl_ЪЩfunc
(
pxa_гrЯl_ЪЩЯlize
);

119 
гrЯl_ЪЩfunc
(
s3c24xx_гrЯl_ЪЩЯlize
);

120 
гrЯl_ЪЩfunc
(
s5p_гrЯl_ЪЩЯlize
);

121 
гrЯl_ЪЩfunc
(
zynq_гrЯl_ЪЩоize
);

122 
гrЯl_ЪЩfunc
(
bfЪ_гrЯl_ЪЩЯlize
);

123 
гrЯl_ЪЩfunc
(
bfЪ_jПg_ЪЩЯlize
);

124 
гrЯl_ЪЩfunc
(
mpc512x_гrЯl_ЪЩЯlize
);

125 
гrЯl_ЪЩfunc
(
uмОЩe_гrЯl_ЪЩЯlize
);

126 
гrЯl_ЪЩfunc
(
au1x00_гrЯl_ЪЩЯlize
);

127 
гrЯl_ЪЩfunc
(
asc_гrЯl_ЪЩЯlize
);

128 
гrЯl_ЪЩfunc
(
jz_гrЯl_ЪЩЯlize
);

129 
гrЯl_ЪЩfunc
(
mpc5xx_гrЯl_ЪЩЯlize
);

130 
гrЯl_ЪЩfunc
(
mpc8260_scc_гrЯl_ЪЩЯlize
);

131 
гrЯl_ЪЩfunc
(
mpc8260_smc_гrЯl_ЪЩЯlize
);

132 
гrЯl_ЪЩfunc
(
mpc85xx_гrЯl_ЪЩЯlize
);

133 
гrЯl_ЪЩfunc
(
i▌480_гrЯl_ЪЩЯlize
);

134 
гrЯl_ЪЩfunc
(
╦┌2_гrЯl_ЪЩЯlize
);

135 
гrЯl_ЪЩfunc
(
╦┌3_гrЯl_ЪЩЯlize
);

136 
гrЯl_ЪЩfunc
(
mмvЦl_гrЯl_ЪЩЯlize
);

137 
гrЯl_ЪЩfunc
(
amЬix_гrЯl_ЪЩЯlize
);

138 
гrЯl_ЪЩfunc
(
bmw_гrЯl_ЪЩЯlize
);

139 
гrЯl_ЪЩfunc
(
cogТt_гrЯl_ЪЩЯlize
);

140 
гrЯl_ЪЩfunc
(
¤ci750_гrЯl_ЪЩЯlize
);

141 
гrЯl_ЪЩfunc
(
evb64260_гrЯl_ЪЩЯlize
);

142 
гrЯl_ЪЩfunc
(
ml2_гrЯl_ЪЩЯlize
);

143 
гrЯl_ЪЩfunc
(
sc┌s▐e_гrЯl_ЪЩЯlize
);

144 
гrЯl_ЪЩfunc
(
p3mx_гrЯl_ЪЩЯlize
);

145 
гrЯl_ЪЩfunc
(
оЛ┐_jПg_гrЯl_ЪЩЯlize
);

146 
гrЯl_ЪЩfunc
(
оЛ┐_гrЯl_ЪЩЯlize
);

147 
гrЯl_ЪЩfunc
(
йmЦ_гrЯl_ЪЩЯlize
);

148 
гrЯl_ЪЩfunc
(
═c32xx_гrЯl_ЪЩЯlize
);

149 
гrЯl_ЪЩfunc
(
mcf_гrЯl_ЪЩЯlize
);

150 
гrЯl_ЪЩfunc
(
oc_гrЯl_ЪЩЯlize
);

151 
гrЯl_ЪЩfunc
(
зndbox_гrЯl_ЪЩЯlize
);

152 
гrЯl_ЪЩfunc
(
■ps7111_гrЯl_ЪЩЯlize
);

153 
гrЯl_ЪЩfunc
(
imx_гrЯl_ЪЩЯlize
);

154 
гrЯl_ЪЩfunc
(
ixp_гrЯl_ЪЩЯlize
);

155 
гrЯl_ЪЩfunc
(
ks8695_гrЯl_ЪЩЯlize
);

156 
гrЯl_ЪЩfunc
(
lh7a40x_гrЯl_ЪЩЯlize
);

157 
гrЯl_ЪЩfunc
(
max3100_гrЯl_ЪЩЯlize
);

158 
гrЯl_ЪЩfunc
(
mxc_гrЯl_ЪЩЯlize
);

159 
гrЯl_ЪЩfunc
(
╢01x_гrЯl_ЪЩЯlize
);

160 
гrЯl_ЪЩfunc
(
з1100_гrЯl_ЪЩЯlize
);

161 
гrЯl_ЪЩfunc
(
sh_гrЯl_ЪЩЯlize
);

162 
гrЯl_ЪЩfunc
(
мm_dcc_ЪЩЯlize
);

163 
гrЯl_ЪЩfunc
(
mxs_auмt_ЪЩЯlize
);

175 
	$гrЯl_╗giбФ
(
гrЯl_devi√
 *
dev
)

177 #ifdeр
CONFIG_NEEDS_MANUAL_RELOC


178 iр(
dev
->
бмt
)

179 
dev
->
бмt
 +Ё
gd
->
╗loc_off
;

180 iр(
dev
->
б▌
)

181 
dev
->
б▌
 +Ё
gd
->
╗loc_off
;

182 iр(
dev
->
гtbrg
)

183 
dev
->
гtbrg
 +Ё
gd
->
╗loc_off
;

184 iр(
dev
->
gСc
)

185 
dev
->
gСc
 +Ё
gd
->
╗loc_off
;

186 iр(
dev
->
tбc
)

187 
dev
->
tбc
 +Ё
gd
->
╗loc_off
;

188 iр(
dev
->
putc
)

189 
dev
->
putc
 +Ё
gd
->
╗loc_off
;

190 iр(
dev
->
puts
)

191 
dev
->
puts
 +Ё
gd
->
╗loc_off
;

194 
dev
->
├xt
 = 
гrЯl_devi√s
;

195 
гrЯl_devi√s
 = 
dev
;

196 
	}
}

207 
	$гrЯl_ЪЩЯlize
()

209 
	`mpc8xx_гrЯl_ЪЩЯlize
();

210 
	`ns16550_гrЯl_ЪЩЯlize
();

211 
	`pxa_гrЯl_ЪЩЯlize
();

212 
	`s3c24xx_гrЯl_ЪЩЯlize
();

213 
	`s5p_гrЯl_ЪЩЯlize
();

214 
	`mpc512x_гrЯl_ЪЩЯlize
();

215 
	`bfЪ_гrЯl_ЪЩЯlize
();

216 
	`bfЪ_jПg_ЪЩЯlize
();

217 
	`uмОЩe_гrЯl_ЪЩЯlize
();

218 
	`zynq_гrЯl_ЪЩоize
();

219 
	`au1x00_гrЯl_ЪЩЯlize
();

220 
	`asc_гrЯl_ЪЩЯlize
();

221 
	`jz_гrЯl_ЪЩЯlize
();

222 
	`mpc5xx_гrЯl_ЪЩЯlize
();

223 
	`mpc8260_scc_гrЯl_ЪЩЯlize
();

224 
	`mpc8260_smc_гrЯl_ЪЩЯlize
();

225 
	`mpc85xx_гrЯl_ЪЩЯlize
();

226 
	`i▌480_гrЯl_ЪЩЯlize
();

227 
	`╦┌2_гrЯl_ЪЩЯlize
();

228 
	`╦┌3_гrЯl_ЪЩЯlize
();

229 
	`mмvЦl_гrЯl_ЪЩЯlize
();

230 
	`amЬix_гrЯl_ЪЩЯlize
();

231 
	`bmw_гrЯl_ЪЩЯlize
();

232 
	`cogТt_гrЯl_ЪЩЯlize
();

233 
	`¤ci750_гrЯl_ЪЩЯlize
();

234 
	`evb64260_гrЯl_ЪЩЯlize
();

235 
	`ml2_гrЯl_ЪЩЯlize
();

236 
	`sc┌s▐e_гrЯl_ЪЩЯlize
();

237 
	`p3mx_гrЯl_ЪЩЯlize
();

238 
	`оЛ┐_jПg_гrЯl_ЪЩЯlize
();

239 
	`оЛ┐_гrЯl_ЪЩЯlize
();

240 
	`йmЦ_гrЯl_ЪЩЯlize
();

241 
	`═c32xx_гrЯl_ЪЩЯlize
();

242 
	`mcf_гrЯl_ЪЩЯlize
();

243 
	`oc_гrЯl_ЪЩЯlize
();

244 
	`зndbox_гrЯl_ЪЩЯlize
();

245 
	`■ps7111_гrЯl_ЪЩЯlize
();

246 
	`imx_гrЯl_ЪЩЯlize
();

247 
	`ixp_гrЯl_ЪЩЯlize
();

248 
	`ks8695_гrЯl_ЪЩЯlize
();

249 
	`lh7a40x_гrЯl_ЪЩЯlize
();

250 
	`max3100_гrЯl_ЪЩЯlize
();

251 
	`mxc_гrЯl_ЪЩЯlize
();

252 
	`╢01x_гrЯl_ЪЩЯlize
();

253 
	`з1100_гrЯl_ЪЩЯlize
();

254 
	`sh_гrЯl_ЪЩЯlize
();

255 
	`мm_dcc_ЪЩЯlize
();

256 
	`mxs_auмt_ЪЩЯlize
();

258 
	`гrЯl_assign
(
	`deчu╔_гrЯl_c┌s▐e
()->
╟me
);

259 
	}
}

268 
	$гrЯl_бdio_ЪЩ
()

270 
бdio_dev
 
dev
;

271 
гrЯl_devi√
 *
s
 = 
гrЯl_devi√s
;

273 
s
) {

274 
	`memгt
(&
dev
, 0, (dev));

276 
	`бr¤y
(
dev
.
╟me
, 
s
->name);

277 
dev
.
цags
 = 
DEV_FLAGS_OUTPUT
 | 
DEV_FLAGS_INPUT
;

279 
dev
.
бмt
 = 
s
->start;

280 
dev
.
б▌
 = 
s
->stop;

281 
dev
.
putc
 = 
s
->putc;

282 
dev
.
puts
 = 
s
->puts;

283 
dev
.
gСc
 = 
s
->getc;

284 
dev
.
tбc
 = 
s
->tstc;

286 
	`бdio_╗giбФ
(&
dev
);

288 
s
 = s->
├xt
;

290 
	}
}

304 
	$гrЯl_assign
(c┌б *
╟me
)

306 
гrЯl_devi√
 *
s
;

308 
s
 = 
гrЯl_devi√s
; s; s = s->
├xt
) {

309 iр(
	`бrcmp
(
s
->
╟me
,Вame))

311 
гrЯl_cu╝Тt
 = 
s
;

315  -
EINVAL
;

316 
	}
}

324 
	$гrЯl_╗ЪЩ_оl
()

326 
гrЯl_devi√
 *
s
;

328 
s
 = 
гrЯl_devi√s
; s; s = s->
├xt
)

329 
s
->
	`бмt
();

330 
	}
}

347 
гrЯl_devi√
 *
	$gС_cu╝Тt
()

349 
гrЯl_devi√
 *
dev
;

351 iр(!(
gd
->
цags
 & 
GD_FLG_RELOC
))

352 
dev
 = 
	`deчu╔_гrЯl_c┌s▐e
();

353 iр(!
гrЯl_cu╝Тt
)

354 
dev
 = 
	`deчu╔_гrЯl_c┌s▐e
();

356 
dev
 = 
гrЯl_cu╝Тt
;

359 iр(!
dev
) {

360 #ifdeр
CONFIG_SPL_BUILD


361 
	`puts
("Cannot find console\n");

362 
	`hкg
();

364 
	`╖nic
("Cannot find console\n");

368  
dev
;

369 
	}
}

381 
	$гrЯl_ЪЩ
()

383  
	`gС_cu╝Тt
()->
	`бмt
();

384 
	}
}

396 
	$гrЯl_гtbrg
()

398 
	`gС_cu╝Тt
()->
	`гtbrg
();

399 
	}
}

412 
	$гrЯl_gСc
()

414  
	`gС_cu╝Тt
()->
	`gСc
();

415 
	}
}

427 
	$гrЯl_tбc
()

429  
	`gС_cu╝Тt
()->
	`tбc
();

430 
	}
}

443 
	$гrЯl_putc
(c┌б 
c
)

445 
	`gС_cu╝Тt
()->
	`putc
(
c
);

446 
	}
}

461 
	$гrЯl_puts
(c┌б *
s
)

463 
	`gС_cu╝Тt
()->
	`puts
(
s
);

464 
	}
}

478 
	$deчu╔_гrЯl_puts
(c┌б *
s
)

480 
гrЯl_devi√
 *
dev
 = 
	`gС_cu╝Тt
();

481 *
s
)

482 
dev
->
	`putc
(*
s
++);

483 
	}
}

485 #iр
CONFIG_POST
 & 
CONFIG_SYS_POST_UART


486 c┌б 
	gbauds
[] = 
CONFIG_SYS_BAUDRATE_TABLE
;

500 
__wЧk


501 
	$uмt_poб_Лб
(
цags
)

503 
c
;

504 
╗t
, 
зved_baud
, 
b
;

505 
гrЯl_devi√
 *
зved_dev
, *
s
;

506 
bd_t
 *
bd
 = 
gd
->bd;

509 
╗t
 = 0;

510 
зved_dev
 = 
гrЯl_cu╝Тt
;

511 
зved_baud
 = 
bd
->
bi_baud┐Л
;

513 
s
 = 
гrЯl_devi√s
; s; s = s->
├xt
) {

515 iр(!
s
->
lo▌
)

519 
гrЯl_cu╝Тt
 = 
s
;

521 
╗t
 = 
	`гrЯl_ЪЩ
();

522 iр(
╗t
)

523 
d┌e
;

526 
	`гrЯl_tбc
())

527 
	`гrЯl_gСc
();

530 
s
->
	`lo▌
(1);

533 
b
 = 0; b < 
	`ARRAY_SIZE
(
bauds
); ++b) {

534 
bd
->
bi_baud┐Л
 = 
bauds
[
b
];

535 
	`гrЯl_гtbrg
();

544 
c
 = 0x20; c < 0x7f; ++c) {

546 
	`гrЯl_putc
(
c
);

549 
╗t
 = (
c
 !Ё
	`гrЯl_gСc
());

550 iр(
╗t
) {

551 
s
->
	`lo▌
(0);

552 
d┌e
;

556 
	`гrЯl_putc
('\b');

557 
╗t
 = ('\b' !Ё
	`гrЯl_gСc
());

558 iр(
╗t
) {

559 
s
->
	`lo▌
(0);

560 
d┌e
;

566 
s
->
	`lo▌
(0);

569 iр(
s
->
б▌
)

570 
s
->
	`б▌
();

573 
d┌e
:

575 
гrЯl_cu╝Тt
 = 
зved_dev
;

576 
bd
->
bi_baud┐Л
 = 
зved_baud
;

577 
	`гrЯl_╗ЪЩ_оl
();

578 
	`гrЯl_гtbrg
();

580  
╗t
;

581 
	}
}

	@setup.c

12 
	~"byoos_c┌fig.h
"

13 
	~"byoos.h
"

15 
	$byoos_гtup
(ш
	`__йМibuЛ__
((
	`г∙i┌
(".setup")));

18 
	$мm_гtup
(
c▄e
)

22 
	}
}

25 
	$byoos_гtup
()

28 
	`soc_гtup
();

29 
	`мm_гtup
(
C▄e
);

33 
	}
}

	@types.h

1 #iтdeр
__ASM_ARM_TYPES_H


2 
	#__ASM_ARM_TYPES_H


	)

4 
	tumode_t
;

11 
__sig├d__
 
	t__s8
;

12 
	t__u8
;

14 
__sig├d__
 
	t__s16
;

15 
	t__u16
;

17 
__sig├d__
 
	t__s32
;

18 
	t__u32
;

20 #iр
defЪed
(
__GNUC__
)

21 
__exЛnsi┌__
 
__sig├d__
 
	t__s64
;

22 
__exЛnsi┌__
 
	t__u64
;

30 sig├d 
	ts8
;

31 
	tu8
;

33 sig├d 
	ts16
;

34 
	tu16
;

36 sig├d 
	ts32
;

37 
	tu32
;

39 sig├d 
	ts64
;

40 
	tu64
;

42 
	#BITS_PER_LONG
 32

	)

	@/usr/include/stdint.h

22 #iтdeр
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<уйu╗s.h
>

26 
	~<bЩs/wchм.h
>

27 
	~<bЩs/w▄dsize.h
>

34 #iтdeр
__Ъt8_t_defЪed


35 
	#__Ъt8_t_defЪed


	)

36 sig├d 
	tЪt8_t
;

37 
	tЪt16_t
;

38 
	tЪt32_t
;

39 #iр
__WORDSIZE
 == 64

40 
	tЪt64_t
;

42 
__exЛnsi┌__


43 
	tЪt64_t
;

48 
	tuЪt8_t
;

49 
	tuЪt16_t
;

50 #iтdeр
__uЪt32_t_defЪed


51 
	tuЪt32_t
;

52 
	#__uЪt32_t_defЪed


	)

54 #iр
__WORDSIZE
 == 64

55 
	tuЪt64_t
;

57 
__exЛnsi┌__


58 
	tuЪt64_t
;

65 sig├d 
	tЪt_╦aб8_t
;

66 
	tЪt_╦aб16_t
;

67 
	tЪt_╦aб32_t
;

68 #iр
__WORDSIZE
 == 64

69 
	tЪt_╦aб64_t
;

71 
__exЛnsi┌__


72 
	tЪt_╦aб64_t
;

76 
	tuЪt_╦aб8_t
;

77 
	tuЪt_╦aб16_t
;

78 
	tuЪt_╦aб32_t
;

79 #iр
__WORDSIZE
 == 64

80 
	tuЪt_╦aб64_t
;

82 
__exЛnsi┌__


83 
	tuЪt_╦aб64_t
;

90 sig├d 
	tЪt_чб8_t
;

91 #iр
__WORDSIZE
 == 64

92 
	tЪt_чб16_t
;

93 
	tЪt_чб32_t
;

94 
	tЪt_чб64_t
;

96 
	tЪt_чб16_t
;

97 
	tЪt_чб32_t
;

98 
__exЛnsi┌__


99 
	tЪt_чб64_t
;

103 
	tuЪt_чб8_t
;

104 #iр
__WORDSIZE
 == 64

105 
	tuЪt_чб16_t
;

106 
	tuЪt_чб32_t
;

107 
	tuЪt_чб64_t
;

109 
	tuЪt_чб16_t
;

110 
	tuЪt_чб32_t
;

111 
__exЛnsi┌__


112 
	tuЪt_чб64_t
;

117 #iр
__WORDSIZE
 == 64

118 #iтdeр
__ЪНМ_t_defЪed


119 
	tЪНМ_t
;

120 
	#__ЪНМ_t_defЪed


	)

122 
	tuЪНМ_t
;

124 #iтdeр
__ЪНМ_t_defЪed


125 
	tЪНМ_t
;

126 
	#__ЪНМ_t_defЪed


	)

128 
	tuЪНМ_t
;

133 #iр
__WORDSIZE
 == 64

134 
	tЪtmax_t
;

135 
	tuЪtmax_t
;

137 
__exЛnsi┌__


138 
	tЪtmax_t
;

139 
__exЛnsi┌__


140 
	tuЪtmax_t
;

144 #iр
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
ш°## 
L


	)

146 
	#__UINT64_C
(
c
ш°## 
UL


	)

148 
	#__INT64_C
(
c
ш°## 
LL


	)

149 
	#__UINT64_C
(
c
ш°## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #iр
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #iр
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #iр
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #iр
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #iр
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #iр
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #iтdeр
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
ш
	)
c

279 
	#INT16_C
(
c
ш
	)
c

280 
	#INT32_C
(
c
ш
	)
c

281 #iр
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
ш°## 
L


	)

284 
	#INT64_C
(
c
ш°## 
LL


	)

288 
	#UINT8_C
(
c
ш
	)
c

289 
	#UINT16_C
(
c
ш
	)
c

290 
	#UINT32_C
(
c
ш°## 
U


	)

291 #iр
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
ш°## 
UL


	)

294 
	#UINT64_C
(
c
ш°## 
ULL


	)

298 #iр
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
ш°## 
L


	)

300 
	#UINTMAX_C
(
c
ш°## 
UL


	)

302 
	#INTMAX_C
(
c
ш°## 
LL


	)

303 
	#UINTMAX_C
(
c
ш°## 
ULL


	)

	@/usr/include/features.h

18 #iтdef 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #undeр
__USE_ISOC11


102 #undeр
__USE_ISOC99


103 #undeр
__USE_ISOC95


104 #undeр
__USE_ISOCXX11


105 #undeр
__USE_POSIX


106 #undeр
__USE_POSIX2


107 #undeр
__USE_POSIX199309


108 #undeр
__USE_POSIX199506


109 #undeр
__USE_XOPEN


110 #undeр
__USE_XOPEN_EXTENDED


111 #undeр
__USE_UNIX98


112 #undeр
__USE_XOPEN2K


113 #undeр
__USE_XOPEN2KXSI


114 #undeр
__USE_XOPEN2K8


115 #undeр
__USE_XOPEN2K8XSI


116 #undeр
__USE_LARGEFILE


117 #undeр
__USE_LARGEFILE64


118 #undeр
__USE_FILE_OFFSET64


119 #undeр
__USE_BSD


120 #undeр
__USE_SVID


121 #undeр
__USE_MISC


122 #undeр
__USE_ATFILE


123 #undeр
__USE_GNU


124 #undeр
__USE_REENTRANT


125 #undeр
__USE_FORTIFY_LEVEL


126 #undeр
__KERNEL_STRICT_NAMES


130 #iтdeр
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #iр
defЪed
 
__GNUC__
 && defЪed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mЪ
) \

143 ((
__GNUC__
 << 16ш+ 
__GNUC_MINOR__
 >Ё((
maj
ш<< 16ш+ (
mЪ
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mЪ
ш0

	)

150 #ifdeр
_GNU_SOURCE


151 #undeр
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #undeр
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #undeр
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #undeр
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #undeр
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #undeр
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #undeр
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #undeр
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #undeр
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #undeр
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #undeр
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #undeр
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #iр(
defЪed
 
_DEFAULT_SOURCE
 \

180 || (!
defЪed
 
	g__STRICT_ANSI__
 \

181 && !
defЪed
 
	g_ISOC99_SOURCE
 \

182 && !
defЪed
 
	g_POSIX_SOURCE
 && !defЪed 
	g_POSIX_C_SOURCE
 \

183 && !
defЪed
 
	g_XOPEN_SOURCE
 \

184 && !
defЪed
 
	g_BSD_SOURCE
 && !defЪed 
	g_SVID_SOURCE
))

185 #undeр
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #undeр
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #undeр
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #iр(
defЪed
 
_ISOC11_SOURCE
 \

195 || (
defЪed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #iр(
defЪed
 
_ISOC99_SOURCE
 || defЪed 
_ISOC11_SOURCE
 \

201 || (
defЪed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #iр(
defЪed
 
_ISOC99_SOURCE
 || defЪed 
_ISOC11_SOURCE
 \

207 || (
defЪed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #iр((
defЪed
 
__¤luеlus
 && __cplusplus >= 201103L) \

216 || 
defЪed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifdeр
_DEFAULT_SOURCE


224 #iр!
defЪed
 
_POSIX_SOURCE
 && !defЪed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #undeр
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #undeр
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #iр((!
defЪed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
defЪed
 
_POSIX_SOURCE
 && !defЪed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #iр
defЪed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #Цiр
defЪed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #Цiр
defЪed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #iр
defЪed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >Ё1 || defЪed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #iр
defЪed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >Ё2 || defЪed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #iр(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #iр(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #iр(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #undeр
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #undeр
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #iр(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #undeр
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #iр(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #undeр
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #iр(
_XOPEN_SOURCE
 - 0) >= 600

285 #iр(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #undeр
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #undeр
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifdeр
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifdeр
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifdeр
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #iр
defЪed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #iр
defЪed
 
_BSD_SOURCE
 || defЪed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #iр
defЪed
 
_REENTRANT
 || defЪed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #iр
defЪed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1ш&& 
defЪed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #iр
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<бdc-┤edef.h
>

360 #undeр
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mЪ
) \

369 ((
__GLIBC__
 << 16ш+ 
__GLIBC_MINOR__
 >Ё((
maj
ш<< 16ш+ (
mЪ
))

	)

372 #iтdeр
__ASSEMBLER__


373 #iтdeр
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #iр
defЪed
 
__USE_FILE_OFFSET64
 && !defЪed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #iр
__GNUC_PREREQ
 (2, 7ш&& 
defЪed
 
__OPTIMIZE__
 \

388 && !
defЪed
 
	g__OPTIMIZE_SIZE__
 && !defЪed 
	g__NO_INLINE__
 \

389 && 
defЪed
 
	g__exЛ║_ЪlЪe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/бubs.h
>

	@/usr/include/stdc-predef.h

18 #iтdef 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifdeр
__GCC_IEC_559


37 #iр
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifdeр
__GCC_IEC_559_COMPLEX


45 #iр
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
17
205
byoos.c
byoos.h
byoos_config.h
crm_regs.h
debug.c
debug.h
errno.h
imx6x.c
imx6x.h
serial.c
serial.h
serial_delete.c
setup.c
types.h
/usr/include/stdint.h
/usr/include/features.h
/usr/include/stdc-predef.h
